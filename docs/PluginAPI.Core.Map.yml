### YamlMime:ManagedReference
items:
- uid: PluginAPI.Core.Map
  commentId: T:PluginAPI.Core.Map
  id: Map
  parent: PluginAPI.Core
  children:
  - PluginAPI.Core.Map.Broadcast(System.UInt16,System.String,Broadcast.BroadcastFlags,System.Boolean)
  - PluginAPI.Core.Map.Cameras
  - PluginAPI.Core.Map.ChangeColorOfAllLights(UnityEngine.Color,System.Single)
  - PluginAPI.Core.Map.ChangeColorOfLights(UnityEngine.Color,MapGeneration.FacilityZone,System.Single)
  - PluginAPI.Core.Map.ChangeColorOfLights(UnityEngine.Color,System.Collections.Generic.IEnumerable{MapGeneration.FacilityZone},System.Single)
  - PluginAPI.Core.Map.ClearBroadcasts
  - PluginAPI.Core.Map.DecontaminationStatus
  - PluginAPI.Core.Map.Elevators
  - PluginAPI.Core.Map.FlickerAllLights(System.Single)
  - PluginAPI.Core.Map.FlickerLights(System.Single,MapGeneration.FacilityZone)
  - PluginAPI.Core.Map.FlickerLights(System.Single,System.Collections.Generic.IEnumerable{MapGeneration.FacilityZone})
  - PluginAPI.Core.Map.ForceDecontamination
  - PluginAPI.Core.Map.Generators
  - PluginAPI.Core.Map.GetRandomRoom(MapGeneration.FacilityZone)
  - PluginAPI.Core.Map.Lockers
  - PluginAPI.Core.Map.PocketDimensionTeleports
  - PluginAPI.Core.Map.ResetColorOfAllLights
  - PluginAPI.Core.Map.ResetColorOfLights(MapGeneration.FacilityZone)
  - PluginAPI.Core.Map.Rooms
  - PluginAPI.Core.Map.Seed
  - PluginAPI.Core.Map.TeslaGates
  - PluginAPI.Core.Map.TurnOnAllLights
  - PluginAPI.Core.Map.TurnOnLights(MapGeneration.FacilityZone)
  - PluginAPI.Core.Map.TurnOnLights(System.Collections.Generic.IEnumerable{MapGeneration.FacilityZone})
  langs:
  - csharp
  - vb
  name: Map
  nameWithType: Map
  fullName: PluginAPI.Core.Map
  type: Class
  source:
    remote:
      path: NwPluginAPI/Core/Map.cs
      branch: 13.0.0
      repo: https://github.com/northwood-studios/NwPluginAPI.git
    id: Map
    path: ../NwPluginAPI/Core/Map.cs
    startLine: 17
  assemblies:
  - PluginAPI
  namespace: PluginAPI.Core
  summary: "\nA set of tools to easily handle the in-game map.\n"
  example: []
  syntax:
    content: public static class Map
    content.vb: Public Module Map
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: PluginAPI.Core.Map.Seed
  commentId: P:PluginAPI.Core.Map.Seed
  id: Seed
  parent: PluginAPI.Core.Map
  langs:
  - csharp
  - vb
  name: Seed
  nameWithType: Map.Seed
  fullName: PluginAPI.Core.Map.Seed
  type: Property
  source:
    remote:
      path: NwPluginAPI/Core/Map.cs
      branch: 13.0.0
      repo: https://github.com/northwood-studios/NwPluginAPI.git
    id: Seed
    path: ../NwPluginAPI/Core/Map.cs
    startLine: 22
  assemblies:
  - PluginAPI
  namespace: PluginAPI.Core
  summary: "\nGets the current seed of the map.\n"
  example: []
  syntax:
    content: public static int Seed { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public Shared ReadOnly Property Seed As Integer
  overload: PluginAPI.Core.Map.Seed*
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: PluginAPI.Core.Map.Rooms
  commentId: P:PluginAPI.Core.Map.Rooms
  id: Rooms
  parent: PluginAPI.Core.Map
  langs:
  - csharp
  - vb
  name: Rooms
  nameWithType: Map.Rooms
  fullName: PluginAPI.Core.Map.Rooms
  type: Property
  source:
    remote:
      path: NwPluginAPI/Core/Map.cs
      branch: 13.0.0
      repo: https://github.com/northwood-studios/NwPluginAPI.git
    id: Rooms
    path: ../NwPluginAPI/Core/Map.cs
    startLine: 27
  assemblies:
  - PluginAPI
  namespace: PluginAPI.Core
  summary: "\nGet the current rooms of the map.\n"
  example: []
  syntax:
    content: public static IReadOnlyCollection<RoomIdentifier> Rooms { get; }
    parameters: []
    return:
      type: System.Collections.Generic.IReadOnlyCollection{MapGeneration.RoomIdentifier}
    content.vb: Public Shared ReadOnly Property Rooms As IReadOnlyCollection(Of RoomIdentifier)
  overload: PluginAPI.Core.Map.Rooms*
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: PluginAPI.Core.Map.Cameras
  commentId: P:PluginAPI.Core.Map.Cameras
  id: Cameras
  parent: PluginAPI.Core.Map
  langs:
  - csharp
  - vb
  name: Cameras
  nameWithType: Map.Cameras
  fullName: PluginAPI.Core.Map.Cameras
  type: Property
  source:
    remote:
      path: NwPluginAPI/Core/Map.cs
      branch: 13.0.0
      repo: https://github.com/northwood-studios/NwPluginAPI.git
    id: Cameras
    path: ../NwPluginAPI/Core/Map.cs
    startLine: 35
  assemblies:
  - PluginAPI
  namespace: PluginAPI.Core
  summary: "\nGet the current <xref href=\"PlayerRoles.PlayableScps.Scp079.Cameras.Scp079Camera\" data-throw-if-not-resolved=\"false\"></xref>s of the map.\n"
  remarks: "\nPlease avoid calling this method several times, I recommend you to save the values in a variable in your code and update it every time a map is generated again.\n"
  example: []
  syntax:
    content: public static IReadOnlyCollection<Scp079Camera> Cameras { get; }
    parameters: []
    return:
      type: System.Collections.Generic.IReadOnlyCollection{PlayerRoles.PlayableScps.Scp079.Cameras.Scp079Camera}
    content.vb: Public Shared ReadOnly Property Cameras As IReadOnlyCollection(Of Scp079Camera)
  overload: PluginAPI.Core.Map.Cameras*
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: PluginAPI.Core.Map.PocketDimensionTeleports
  commentId: P:PluginAPI.Core.Map.PocketDimensionTeleports
  id: PocketDimensionTeleports
  parent: PluginAPI.Core.Map
  langs:
  - csharp
  - vb
  name: PocketDimensionTeleports
  nameWithType: Map.PocketDimensionTeleports
  fullName: PluginAPI.Core.Map.PocketDimensionTeleports
  type: Property
  source:
    remote:
      path: NwPluginAPI/Core/Map.cs
      branch: 13.0.0
      repo: https://github.com/northwood-studios/NwPluginAPI.git
    id: PocketDimensionTeleports
    path: ../NwPluginAPI/Core/Map.cs
    startLine: 43
  assemblies:
  - PluginAPI
  namespace: PluginAPI.Core
  summary: "\nGet the current pocket dimensions teleports of the map.\n"
  remarks: "\nPlease avoid calling this method several times, I recommend you to save the values in a variable in your code and update it every time a map is generated again.\n"
  example: []
  syntax:
    content: public static IReadOnlyCollection<PocketDimensionTeleport> PocketDimensionTeleports { get; }
    parameters: []
    return:
      type: System.Collections.Generic.IReadOnlyCollection{PocketDimensionTeleport}
    content.vb: Public Shared ReadOnly Property PocketDimensionTeleports As IReadOnlyCollection(Of PocketDimensionTeleport)
  overload: PluginAPI.Core.Map.PocketDimensionTeleports*
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: PluginAPI.Core.Map.Lockers
  commentId: P:PluginAPI.Core.Map.Lockers
  id: Lockers
  parent: PluginAPI.Core.Map
  langs:
  - csharp
  - vb
  name: Lockers
  nameWithType: Map.Lockers
  fullName: PluginAPI.Core.Map.Lockers
  type: Property
  source:
    remote:
      path: NwPluginAPI/Core/Map.cs
      branch: 13.0.0
      repo: https://github.com/northwood-studios/NwPluginAPI.git
    id: Lockers
    path: ../NwPluginAPI/Core/Map.cs
    startLine: 51
  assemblies:
  - PluginAPI
  namespace: PluginAPI.Core
  summary: "\nGet the current lockers of the map.\n"
  remarks: "\nPlease avoid calling this method several times, I recommend you to save the values in a variable in your code and update it every time a map is generated again.\n"
  example: []
  syntax:
    content: public static IReadOnlyCollection<Locker> Lockers { get; }
    parameters: []
    return:
      type: System.Collections.Generic.IReadOnlyCollection{MapGeneration.Distributors.Locker}
    content.vb: Public Shared ReadOnly Property Lockers As IReadOnlyCollection(Of Locker)
  overload: PluginAPI.Core.Map.Lockers*
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: PluginAPI.Core.Map.Elevators
  commentId: P:PluginAPI.Core.Map.Elevators
  id: Elevators
  parent: PluginAPI.Core.Map
  langs:
  - csharp
  - vb
  name: Elevators
  nameWithType: Map.Elevators
  fullName: PluginAPI.Core.Map.Elevators
  type: Property
  source:
    remote:
      path: NwPluginAPI/Core/Map.cs
      branch: 13.0.0
      repo: https://github.com/northwood-studios/NwPluginAPI.git
    id: Elevators
    path: ../NwPluginAPI/Core/Map.cs
    startLine: 59
  assemblies:
  - PluginAPI
  namespace: PluginAPI.Core
  summary: "\nGet the current elevators of the map.\n"
  remarks: "\nPlease avoid calling this method several times, I recommend you to save the values in a variable in your code and update it every time a map is generated again.\n"
  example: []
  syntax:
    content: public static IReadOnlyCollection<ElevatorChamber> Elevators { get; }
    parameters: []
    return:
      type: System.Collections.Generic.IReadOnlyCollection{Interactables.Interobjects.ElevatorChamber}
    content.vb: Public Shared ReadOnly Property Elevators As IReadOnlyCollection(Of ElevatorChamber)
  overload: PluginAPI.Core.Map.Elevators*
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: PluginAPI.Core.Map.TeslaGates
  commentId: P:PluginAPI.Core.Map.TeslaGates
  id: TeslaGates
  parent: PluginAPI.Core.Map
  langs:
  - csharp
  - vb
  name: TeslaGates
  nameWithType: Map.TeslaGates
  fullName: PluginAPI.Core.Map.TeslaGates
  type: Property
  source:
    remote:
      path: NwPluginAPI/Core/Map.cs
      branch: 13.0.0
      repo: https://github.com/northwood-studios/NwPluginAPI.git
    id: TeslaGates
    path: ../NwPluginAPI/Core/Map.cs
    startLine: 67
  assemblies:
  - PluginAPI
  namespace: PluginAPI.Core
  summary: "\nGet the current tesla gates of the map.\n"
  remarks: "\nPlease avoid calling this method several times, I recommend you to save the values in a variable in your code and update it every time a map is generated again.\n"
  example: []
  syntax:
    content: public static IReadOnlyCollection<TeslaGate> TeslaGates { get; }
    parameters: []
    return:
      type: System.Collections.Generic.IReadOnlyCollection{TeslaGate}
    content.vb: Public Shared ReadOnly Property TeslaGates As IReadOnlyCollection(Of TeslaGate)
  overload: PluginAPI.Core.Map.TeslaGates*
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: PluginAPI.Core.Map.Generators
  commentId: P:PluginAPI.Core.Map.Generators
  id: Generators
  parent: PluginAPI.Core.Map
  langs:
  - csharp
  - vb
  name: Generators
  nameWithType: Map.Generators
  fullName: PluginAPI.Core.Map.Generators
  type: Property
  source:
    remote:
      path: NwPluginAPI/Core/Map.cs
      branch: 13.0.0
      repo: https://github.com/northwood-studios/NwPluginAPI.git
    id: Generators
    path: ../NwPluginAPI/Core/Map.cs
    startLine: 75
  assemblies:
  - PluginAPI
  namespace: PluginAPI.Core
  summary: "\nGet the current generators of the map.\n"
  remarks: "\nPlease avoid calling this method several times, I recommend you to save the values in a variable in your code and update it every time a map is generated again.\n"
  example: []
  syntax:
    content: public static IReadOnlyCollection<Scp079Generator> Generators { get; }
    parameters: []
    return:
      type: System.Collections.Generic.IReadOnlyCollection{MapGeneration.Distributors.Scp079Generator}
    content.vb: Public Shared ReadOnly Property Generators As IReadOnlyCollection(Of Scp079Generator)
  overload: PluginAPI.Core.Map.Generators*
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: PluginAPI.Core.Map.Broadcast(System.UInt16,System.String,Broadcast.BroadcastFlags,System.Boolean)
  commentId: M:PluginAPI.Core.Map.Broadcast(System.UInt16,System.String,Broadcast.BroadcastFlags,System.Boolean)
  id: Broadcast(System.UInt16,System.String,Broadcast.BroadcastFlags,System.Boolean)
  parent: PluginAPI.Core.Map
  langs:
  - csharp
  - vb
  name: Broadcast(UInt16, String, Broadcast.BroadcastFlags, Boolean)
  nameWithType: Map.Broadcast(UInt16, String, Broadcast.BroadcastFlags, Boolean)
  fullName: PluginAPI.Core.Map.Broadcast(System.UInt16, System.String, Broadcast.BroadcastFlags, System.Boolean)
  type: Method
  source:
    remote:
      path: NwPluginAPI/Core/Map.cs
      branch: 13.0.0
      repo: https://github.com/northwood-studios/NwPluginAPI.git
    id: Broadcast
    path: ../NwPluginAPI/Core/Map.cs
    startLine: 84
  assemblies:
  - PluginAPI
  namespace: PluginAPI.Core
  summary: "\nBroadcast a message to all <xref href=\"PluginAPI.Core.Player?text=players\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public static void Broadcast(ushort duration, string message, Broadcast.BroadcastFlags flag = Broadcast.BroadcastFlags.Normal, bool clearPrevius = false)
    parameters:
    - id: duration
      type: System.UInt16
      description: The duration in seconds of the broadcast
    - id: message
      type: System.String
      description: The message that will broadcast
    - id: flag
      type: Broadcast.BroadcastFlags
      description: The broadcast flag type
    - id: clearPrevius
      type: System.Boolean
      description: Clear all player broadcast before sending this broadcast ?
    content.vb: Public Shared Sub Broadcast(duration As UShort, message As String, flag As Broadcast.BroadcastFlags = Broadcast.BroadcastFlags.Normal, clearPrevius As Boolean = False)
  overload: PluginAPI.Core.Map.Broadcast*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: PluginAPI.Core.Map.ClearBroadcasts
  commentId: M:PluginAPI.Core.Map.ClearBroadcasts
  id: ClearBroadcasts
  parent: PluginAPI.Core.Map
  langs:
  - csharp
  - vb
  name: ClearBroadcasts()
  nameWithType: Map.ClearBroadcasts()
  fullName: PluginAPI.Core.Map.ClearBroadcasts()
  type: Method
  source:
    remote:
      path: NwPluginAPI/Core/Map.cs
      branch: 13.0.0
      repo: https://github.com/northwood-studios/NwPluginAPI.git
    id: ClearBroadcasts
    path: ../NwPluginAPI/Core/Map.cs
    startLine: 95
  assemblies:
  - PluginAPI
  namespace: PluginAPI.Core
  summary: "\nClear all <xref href=\"PluginAPI.Core.Player?text=+players\" data-throw-if-not-resolved=\"false\"></xref> broadcast.\n"
  example: []
  syntax:
    content: public static void ClearBroadcasts()
    content.vb: Public Shared Sub ClearBroadcasts
  overload: PluginAPI.Core.Map.ClearBroadcasts*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: PluginAPI.Core.Map.ForceDecontamination
  commentId: M:PluginAPI.Core.Map.ForceDecontamination
  id: ForceDecontamination
  parent: PluginAPI.Core.Map
  langs:
  - csharp
  - vb
  name: ForceDecontamination()
  nameWithType: Map.ForceDecontamination()
  fullName: PluginAPI.Core.Map.ForceDecontamination()
  type: Method
  source:
    remote:
      path: NwPluginAPI/Core/Map.cs
      branch: 13.0.0
      repo: https://github.com/northwood-studios/NwPluginAPI.git
    id: ForceDecontamination
    path: ../NwPluginAPI/Core/Map.cs
    startLine: 100
  assemblies:
  - PluginAPI
  namespace: PluginAPI.Core
  summary: "\nForce LCZ decontamination.\n"
  example: []
  syntax:
    content: public static void ForceDecontamination()
    content.vb: Public Shared Sub ForceDecontamination
  overload: PluginAPI.Core.Map.ForceDecontamination*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: PluginAPI.Core.Map.DecontaminationStatus
  commentId: P:PluginAPI.Core.Map.DecontaminationStatus
  id: DecontaminationStatus
  parent: PluginAPI.Core.Map
  langs:
  - csharp
  - vb
  name: DecontaminationStatus
  nameWithType: Map.DecontaminationStatus
  fullName: PluginAPI.Core.Map.DecontaminationStatus
  type: Property
  source:
    remote:
      path: NwPluginAPI/Core/Map.cs
      branch: 13.0.0
      repo: https://github.com/northwood-studios/NwPluginAPI.git
    id: DecontaminationStatus
    path: ../NwPluginAPI/Core/Map.cs
    startLine: 108
  assemblies:
  - PluginAPI
  namespace: PluginAPI.Core
  summary: "\nGet or set LCZ decontamination status.\n<remarks>\nNone is by default, set status to force dont actually force decontamination for that use <xref href=\"PluginAPI.Core.Map.ForceDecontamination\" data-throw-if-not-resolved=\"false\"></xref>.\n</remarks>\n"
  example: []
  syntax:
    content: public static DecontaminationController.DecontaminationStatus DecontaminationStatus { get; set; }
    parameters: []
    return:
      type: LightContainmentZoneDecontamination.DecontaminationController.DecontaminationStatus
    content.vb: Public Shared Property DecontaminationStatus As DecontaminationController.DecontaminationStatus
  overload: PluginAPI.Core.Map.DecontaminationStatus*
  modifiers.csharp:
  - public
  - static
  - get
  - set
  modifiers.vb:
  - Public
  - Shared
- uid: PluginAPI.Core.Map.GetRandomRoom(MapGeneration.FacilityZone)
  commentId: M:PluginAPI.Core.Map.GetRandomRoom(MapGeneration.FacilityZone)
  id: GetRandomRoom(MapGeneration.FacilityZone)
  parent: PluginAPI.Core.Map
  langs:
  - csharp
  - vb
  name: GetRandomRoom(FacilityZone)
  nameWithType: Map.GetRandomRoom(FacilityZone)
  fullName: PluginAPI.Core.Map.GetRandomRoom(MapGeneration.FacilityZone)
  type: Method
  source:
    remote:
      path: NwPluginAPI/Core/Map.cs
      branch: 13.0.0
      repo: https://github.com/northwood-studios/NwPluginAPI.git
    id: GetRandomRoom
    path: ../NwPluginAPI/Core/Map.cs
    startLine: 125
  assemblies:
  - PluginAPI
  namespace: PluginAPI.Core
  summary: "\nGet a random room from the specified zone.\n"
  remarks: "\nCan be null if no room is found.\n"
  example: []
  syntax:
    content: public static RoomIdentifier GetRandomRoom(FacilityZone zone)
    parameters:
    - id: zone
      type: MapGeneration.FacilityZone
    return:
      type: MapGeneration.RoomIdentifier
      description: <xref href="MapGeneration.RoomIdentifier" data-throw-if-not-resolved="false"></xref>
    content.vb: Public Shared Function GetRandomRoom(zone As FacilityZone) As RoomIdentifier
  overload: PluginAPI.Core.Map.GetRandomRoom*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: PluginAPI.Core.Map.FlickerLights(System.Single,MapGeneration.FacilityZone)
  commentId: M:PluginAPI.Core.Map.FlickerLights(System.Single,MapGeneration.FacilityZone)
  id: FlickerLights(System.Single,MapGeneration.FacilityZone)
  parent: PluginAPI.Core.Map
  langs:
  - csharp
  - vb
  name: FlickerLights(Single, FacilityZone)
  nameWithType: Map.FlickerLights(Single, FacilityZone)
  fullName: PluginAPI.Core.Map.FlickerLights(System.Single, MapGeneration.FacilityZone)
  type: Method
  source:
    remote:
      path: NwPluginAPI/Core/Map.cs
      branch: 13.0.0
      repo: https://github.com/northwood-studios/NwPluginAPI.git
    id: FlickerLights
    path: ../NwPluginAPI/Core/Map.cs
    startLine: 140
  assemblies:
  - PluginAPI
  namespace: PluginAPI.Core
  summary: "\nTurns off the lights in the specified zone, for a period of time.\n"
  example: []
  syntax:
    content: public static void FlickerLights(float duration, FacilityZone zone)
    parameters:
    - id: duration
      type: System.Single
      description: The duration in seconds of the blackout
    - id: zone
      type: MapGeneration.FacilityZone
      description: The area where the lights are off
    content.vb: Public Shared Sub FlickerLights(duration As Single, zone As FacilityZone)
  overload: PluginAPI.Core.Map.FlickerLights*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: PluginAPI.Core.Map.FlickerLights(System.Single,System.Collections.Generic.IEnumerable{MapGeneration.FacilityZone})
  commentId: M:PluginAPI.Core.Map.FlickerLights(System.Single,System.Collections.Generic.IEnumerable{MapGeneration.FacilityZone})
  id: FlickerLights(System.Single,System.Collections.Generic.IEnumerable{MapGeneration.FacilityZone})
  parent: PluginAPI.Core.Map
  langs:
  - csharp
  - vb
  name: FlickerLights(Single, IEnumerable<FacilityZone>)
  nameWithType: Map.FlickerLights(Single, IEnumerable<FacilityZone>)
  fullName: PluginAPI.Core.Map.FlickerLights(System.Single, System.Collections.Generic.IEnumerable<MapGeneration.FacilityZone>)
  type: Method
  source:
    remote:
      path: NwPluginAPI/Core/Map.cs
      branch: 13.0.0
      repo: https://github.com/northwood-studios/NwPluginAPI.git
    id: FlickerLights
    path: ../NwPluginAPI/Core/Map.cs
    startLine: 155
  assemblies:
  - PluginAPI
  namespace: PluginAPI.Core
  summary: "\nTurns off the lights in the specified zones, for a period of time.\n"
  example: []
  syntax:
    content: public static void FlickerLights(float duration, IEnumerable<FacilityZone> zones)
    parameters:
    - id: duration
      type: System.Single
      description: The duration in seconds of the blackout
    - id: zones
      type: System.Collections.Generic.IEnumerable{MapGeneration.FacilityZone}
      description: The areas where the lights will be turned off
    content.vb: Public Shared Sub FlickerLights(duration As Single, zones As IEnumerable(Of FacilityZone))
  overload: PluginAPI.Core.Map.FlickerLights*
  nameWithType.vb: Map.FlickerLights(Single, IEnumerable(Of FacilityZone))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: PluginAPI.Core.Map.FlickerLights(System.Single, System.Collections.Generic.IEnumerable(Of MapGeneration.FacilityZone))
  name.vb: FlickerLights(Single, IEnumerable(Of FacilityZone))
- uid: PluginAPI.Core.Map.FlickerAllLights(System.Single)
  commentId: M:PluginAPI.Core.Map.FlickerAllLights(System.Single)
  id: FlickerAllLights(System.Single)
  parent: PluginAPI.Core.Map
  langs:
  - csharp
  - vb
  name: FlickerAllLights(Single)
  nameWithType: Map.FlickerAllLights(Single)
  fullName: PluginAPI.Core.Map.FlickerAllLights(System.Single)
  type: Method
  source:
    remote:
      path: NwPluginAPI/Core/Map.cs
      branch: 13.0.0
      repo: https://github.com/northwood-studios/NwPluginAPI.git
    id: FlickerAllLights
    path: ../NwPluginAPI/Core/Map.cs
    startLine: 167
  assemblies:
  - PluginAPI
  namespace: PluginAPI.Core
  summary: "\nTurns off all lights on the map, for a specified time.\n"
  example: []
  syntax:
    content: public static void FlickerAllLights(float duration)
    parameters:
    - id: duration
      type: System.Single
      description: The duration in seconds of the blackout
    content.vb: Public Shared Sub FlickerAllLights(duration As Single)
  overload: PluginAPI.Core.Map.FlickerAllLights*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: PluginAPI.Core.Map.TurnOnAllLights
  commentId: M:PluginAPI.Core.Map.TurnOnAllLights
  id: TurnOnAllLights
  parent: PluginAPI.Core.Map
  langs:
  - csharp
  - vb
  name: TurnOnAllLights()
  nameWithType: Map.TurnOnAllLights()
  fullName: PluginAPI.Core.Map.TurnOnAllLights()
  type: Method
  source:
    remote:
      path: NwPluginAPI/Core/Map.cs
      branch: 13.0.0
      repo: https://github.com/northwood-studios/NwPluginAPI.git
    id: TurnOnAllLights
    path: ../NwPluginAPI/Core/Map.cs
    startLine: 182
  assemblies:
  - PluginAPI
  namespace: PluginAPI.Core
  summary: "\nTurn on all the lights on the map\n"
  example: []
  syntax:
    content: public static void TurnOnAllLights()
    content.vb: Public Shared Sub TurnOnAllLights
  overload: PluginAPI.Core.Map.TurnOnAllLights*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: PluginAPI.Core.Map.TurnOnLights(MapGeneration.FacilityZone)
  commentId: M:PluginAPI.Core.Map.TurnOnLights(MapGeneration.FacilityZone)
  id: TurnOnLights(MapGeneration.FacilityZone)
  parent: PluginAPI.Core.Map
  langs:
  - csharp
  - vb
  name: TurnOnLights(FacilityZone)
  nameWithType: Map.TurnOnLights(FacilityZone)
  fullName: PluginAPI.Core.Map.TurnOnLights(MapGeneration.FacilityZone)
  type: Method
  source:
    remote:
      path: NwPluginAPI/Core/Map.cs
      branch: 13.0.0
      repo: https://github.com/northwood-studios/NwPluginAPI.git
    id: TurnOnLights
    path: ../NwPluginAPI/Core/Map.cs
    startLine: 194
  assemblies:
  - PluginAPI
  namespace: PluginAPI.Core
  summary: "\nTurns on all the lights in a specified zone.\n"
  example: []
  syntax:
    content: public static void TurnOnLights(FacilityZone zone)
    parameters:
    - id: zone
      type: MapGeneration.FacilityZone
      description: The area where the lights off will be switched on
    content.vb: Public Shared Sub TurnOnLights(zone As FacilityZone)
  overload: PluginAPI.Core.Map.TurnOnLights*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: PluginAPI.Core.Map.TurnOnLights(System.Collections.Generic.IEnumerable{MapGeneration.FacilityZone})
  commentId: M:PluginAPI.Core.Map.TurnOnLights(System.Collections.Generic.IEnumerable{MapGeneration.FacilityZone})
  id: TurnOnLights(System.Collections.Generic.IEnumerable{MapGeneration.FacilityZone})
  parent: PluginAPI.Core.Map
  langs:
  - csharp
  - vb
  name: TurnOnLights(IEnumerable<FacilityZone>)
  nameWithType: Map.TurnOnLights(IEnumerable<FacilityZone>)
  fullName: PluginAPI.Core.Map.TurnOnLights(System.Collections.Generic.IEnumerable<MapGeneration.FacilityZone>)
  type: Method
  source:
    remote:
      path: NwPluginAPI/Core/Map.cs
      branch: 13.0.0
      repo: https://github.com/northwood-studios/NwPluginAPI.git
    id: TurnOnLights
    path: ../NwPluginAPI/Core/Map.cs
    startLine: 207
  assemblies:
  - PluginAPI
  namespace: PluginAPI.Core
  summary: "\nTurns on the lights in the specified areas\n"
  example: []
  syntax:
    content: public static void TurnOnLights(IEnumerable<FacilityZone> zones)
    parameters:
    - id: zones
      type: System.Collections.Generic.IEnumerable{MapGeneration.FacilityZone}
      description: The areas where the lights off will be switched on
    content.vb: Public Shared Sub TurnOnLights(zones As IEnumerable(Of FacilityZone))
  overload: PluginAPI.Core.Map.TurnOnLights*
  nameWithType.vb: Map.TurnOnLights(IEnumerable(Of FacilityZone))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: PluginAPI.Core.Map.TurnOnLights(System.Collections.Generic.IEnumerable(Of MapGeneration.FacilityZone))
  name.vb: TurnOnLights(IEnumerable(Of FacilityZone))
- uid: PluginAPI.Core.Map.ChangeColorOfAllLights(UnityEngine.Color,System.Single)
  commentId: M:PluginAPI.Core.Map.ChangeColorOfAllLights(UnityEngine.Color,System.Single)
  id: ChangeColorOfAllLights(UnityEngine.Color,System.Single)
  parent: PluginAPI.Core.Map
  langs:
  - csharp
  - vb
  name: ChangeColorOfAllLights(Color, Single)
  nameWithType: Map.ChangeColorOfAllLights(Color, Single)
  fullName: PluginAPI.Core.Map.ChangeColorOfAllLights(UnityEngine.Color, System.Single)
  type: Method
  source:
    remote:
      path: NwPluginAPI/Core/Map.cs
      branch: 13.0.0
      repo: https://github.com/northwood-studios/NwPluginAPI.git
    id: ChangeColorOfAllLights
    path: ../NwPluginAPI/Core/Map.cs
    startLine: 224
  assemblies:
  - PluginAPI
  namespace: PluginAPI.Core
  summary: "\nChanges the color of all lights on the map\n"
  example: []
  syntax:
    content: public static void ChangeColorOfAllLights(Color color, float intensity = 0F)
    parameters:
    - id: color
      type: UnityEngine.Color
      description: <xref href="UnityEngine.Color" data-throw-if-not-resolved="false"></xref> of the lights
    - id: intensity
      type: System.Single
      description: Light intensity
    content.vb: Public Shared Sub ChangeColorOfAllLights(color As Color, intensity As Single = 0F)
  overload: PluginAPI.Core.Map.ChangeColorOfAllLights*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: PluginAPI.Core.Map.ChangeColorOfLights(UnityEngine.Color,MapGeneration.FacilityZone,System.Single)
  commentId: M:PluginAPI.Core.Map.ChangeColorOfLights(UnityEngine.Color,MapGeneration.FacilityZone,System.Single)
  id: ChangeColorOfLights(UnityEngine.Color,MapGeneration.FacilityZone,System.Single)
  parent: PluginAPI.Core.Map
  langs:
  - csharp
  - vb
  name: ChangeColorOfLights(Color, FacilityZone, Single)
  nameWithType: Map.ChangeColorOfLights(Color, FacilityZone, Single)
  fullName: PluginAPI.Core.Map.ChangeColorOfLights(UnityEngine.Color, MapGeneration.FacilityZone, System.Single)
  type: Method
  source:
    remote:
      path: NwPluginAPI/Core/Map.cs
      branch: 13.0.0
      repo: https://github.com/northwood-studios/NwPluginAPI.git
    id: ChangeColorOfLights
    path: ../NwPluginAPI/Core/Map.cs
    startLine: 237
  assemblies:
  - PluginAPI
  namespace: PluginAPI.Core
  summary: "\nChanges the color of the lights in a specific zone\n"
  example: []
  syntax:
    content: public static void ChangeColorOfLights(Color color, FacilityZone zone, float intensity = 0F)
    parameters:
    - id: color
      type: UnityEngine.Color
    - id: zone
      type: MapGeneration.FacilityZone
    - id: intensity
      type: System.Single
    content.vb: Public Shared Sub ChangeColorOfLights(color As Color, zone As FacilityZone, intensity As Single = 0F)
  overload: PluginAPI.Core.Map.ChangeColorOfLights*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: PluginAPI.Core.Map.ChangeColorOfLights(UnityEngine.Color,System.Collections.Generic.IEnumerable{MapGeneration.FacilityZone},System.Single)
  commentId: M:PluginAPI.Core.Map.ChangeColorOfLights(UnityEngine.Color,System.Collections.Generic.IEnumerable{MapGeneration.FacilityZone},System.Single)
  id: ChangeColorOfLights(UnityEngine.Color,System.Collections.Generic.IEnumerable{MapGeneration.FacilityZone},System.Single)
  parent: PluginAPI.Core.Map
  langs:
  - csharp
  - vb
  name: ChangeColorOfLights(Color, IEnumerable<FacilityZone>, Single)
  nameWithType: Map.ChangeColorOfLights(Color, IEnumerable<FacilityZone>, Single)
  fullName: PluginAPI.Core.Map.ChangeColorOfLights(UnityEngine.Color, System.Collections.Generic.IEnumerable<MapGeneration.FacilityZone>, System.Single)
  type: Method
  source:
    remote:
      path: NwPluginAPI/Core/Map.cs
      branch: 13.0.0
      repo: https://github.com/northwood-studios/NwPluginAPI.git
    id: ChangeColorOfLights
    path: ../NwPluginAPI/Core/Map.cs
    startLine: 253
  assemblies:
  - PluginAPI
  namespace: PluginAPI.Core
  summary: "\nChanges the color of the lights in a specific zones\n"
  example: []
  syntax:
    content: public static void ChangeColorOfLights(Color color, IEnumerable<FacilityZone> zones, float intensity = 0F)
    parameters:
    - id: color
      type: UnityEngine.Color
    - id: zones
      type: System.Collections.Generic.IEnumerable{MapGeneration.FacilityZone}
    - id: intensity
      type: System.Single
    content.vb: Public Shared Sub ChangeColorOfLights(color As Color, zones As IEnumerable(Of FacilityZone), intensity As Single = 0F)
  overload: PluginAPI.Core.Map.ChangeColorOfLights*
  nameWithType.vb: Map.ChangeColorOfLights(Color, IEnumerable(Of FacilityZone), Single)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: PluginAPI.Core.Map.ChangeColorOfLights(UnityEngine.Color, System.Collections.Generic.IEnumerable(Of MapGeneration.FacilityZone), System.Single)
  name.vb: ChangeColorOfLights(Color, IEnumerable(Of FacilityZone), Single)
- uid: PluginAPI.Core.Map.ResetColorOfAllLights
  commentId: M:PluginAPI.Core.Map.ResetColorOfAllLights
  id: ResetColorOfAllLights
  parent: PluginAPI.Core.Map
  langs:
  - csharp
  - vb
  name: ResetColorOfAllLights()
  nameWithType: Map.ResetColorOfAllLights()
  fullName: PluginAPI.Core.Map.ResetColorOfAllLights()
  type: Method
  source:
    remote:
      path: NwPluginAPI/Core/Map.cs
      branch: 13.0.0
      repo: https://github.com/northwood-studios/NwPluginAPI.git
    id: ResetColorOfAllLights
    path: ../NwPluginAPI/Core/Map.cs
    startLine: 268
  assemblies:
  - PluginAPI
  namespace: PluginAPI.Core
  summary: "\nResets the color of all lights to their original color.\n"
  example: []
  syntax:
    content: public static void ResetColorOfAllLights()
    content.vb: Public Shared Sub ResetColorOfAllLights
  overload: PluginAPI.Core.Map.ResetColorOfAllLights*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: PluginAPI.Core.Map.ResetColorOfLights(MapGeneration.FacilityZone)
  commentId: M:PluginAPI.Core.Map.ResetColorOfLights(MapGeneration.FacilityZone)
  id: ResetColorOfLights(MapGeneration.FacilityZone)
  parent: PluginAPI.Core.Map
  langs:
  - csharp
  - vb
  name: ResetColorOfLights(FacilityZone)
  nameWithType: Map.ResetColorOfLights(FacilityZone)
  fullName: PluginAPI.Core.Map.ResetColorOfLights(MapGeneration.FacilityZone)
  type: Method
  source:
    remote:
      path: NwPluginAPI/Core/Map.cs
      branch: 13.0.0
      repo: https://github.com/northwood-studios/NwPluginAPI.git
    id: ResetColorOfLights
    path: ../NwPluginAPI/Core/Map.cs
    startLine: 281
  assemblies:
  - PluginAPI
  namespace: PluginAPI.Core
  summary: "\nResets the color of the lights to their original color in the specified zone.\n"
  example: []
  syntax:
    content: public static void ResetColorOfLights(FacilityZone zone)
    parameters:
    - id: zone
      type: MapGeneration.FacilityZone
      description: Facilty zone
    content.vb: Public Shared Sub ResetColorOfLights(zone As FacilityZone)
  overload: PluginAPI.Core.Map.ResetColorOfLights*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: PluginAPI.Core
  commentId: N:PluginAPI.Core
  name: PluginAPI.Core
  nameWithType: PluginAPI.Core
  fullName: PluginAPI.Core
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: PluginAPI.Core.Map.Seed*
  commentId: Overload:PluginAPI.Core.Map.Seed
  name: Seed
  nameWithType: Map.Seed
  fullName: PluginAPI.Core.Map.Seed
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: PluginAPI.Core.Map.Rooms*
  commentId: Overload:PluginAPI.Core.Map.Rooms
  name: Rooms
  nameWithType: Map.Rooms
  fullName: PluginAPI.Core.Map.Rooms
- uid: System.Collections.Generic.IReadOnlyCollection{MapGeneration.RoomIdentifier}
  commentId: T:System.Collections.Generic.IReadOnlyCollection{MapGeneration.RoomIdentifier}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IReadOnlyCollection`1
  name: IReadOnlyCollection<RoomIdentifier>
  nameWithType: IReadOnlyCollection<RoomIdentifier>
  fullName: System.Collections.Generic.IReadOnlyCollection<MapGeneration.RoomIdentifier>
  nameWithType.vb: IReadOnlyCollection(Of RoomIdentifier)
  fullName.vb: System.Collections.Generic.IReadOnlyCollection(Of MapGeneration.RoomIdentifier)
  name.vb: IReadOnlyCollection(Of RoomIdentifier)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: MapGeneration.RoomIdentifier
    name: RoomIdentifier
    nameWithType: RoomIdentifier
    fullName: MapGeneration.RoomIdentifier
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: MapGeneration.RoomIdentifier
    name: RoomIdentifier
    nameWithType: RoomIdentifier
    fullName: MapGeneration.RoomIdentifier
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IReadOnlyCollection`1
  commentId: T:System.Collections.Generic.IReadOnlyCollection`1
  isExternal: true
  name: IReadOnlyCollection<T>
  nameWithType: IReadOnlyCollection<T>
  fullName: System.Collections.Generic.IReadOnlyCollection<T>
  nameWithType.vb: IReadOnlyCollection(Of T)
  fullName.vb: System.Collections.Generic.IReadOnlyCollection(Of T)
  name.vb: IReadOnlyCollection(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: PlayerRoles.PlayableScps.Scp079.Cameras.Scp079Camera
  commentId: T:PlayerRoles.PlayableScps.Scp079.Cameras.Scp079Camera
  parent: PlayerRoles.PlayableScps.Scp079.Cameras
  isExternal: true
  name: Scp079Camera
  nameWithType: Scp079Camera
  fullName: PlayerRoles.PlayableScps.Scp079.Cameras.Scp079Camera
- uid: PluginAPI.Core.Map.Cameras*
  commentId: Overload:PluginAPI.Core.Map.Cameras
  name: Cameras
  nameWithType: Map.Cameras
  fullName: PluginAPI.Core.Map.Cameras
- uid: System.Collections.Generic.IReadOnlyCollection{PlayerRoles.PlayableScps.Scp079.Cameras.Scp079Camera}
  commentId: T:System.Collections.Generic.IReadOnlyCollection{PlayerRoles.PlayableScps.Scp079.Cameras.Scp079Camera}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IReadOnlyCollection`1
  name: IReadOnlyCollection<Scp079Camera>
  nameWithType: IReadOnlyCollection<Scp079Camera>
  fullName: System.Collections.Generic.IReadOnlyCollection<PlayerRoles.PlayableScps.Scp079.Cameras.Scp079Camera>
  nameWithType.vb: IReadOnlyCollection(Of Scp079Camera)
  fullName.vb: System.Collections.Generic.IReadOnlyCollection(Of PlayerRoles.PlayableScps.Scp079.Cameras.Scp079Camera)
  name.vb: IReadOnlyCollection(Of Scp079Camera)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: PlayerRoles.PlayableScps.Scp079.Cameras.Scp079Camera
    name: Scp079Camera
    nameWithType: Scp079Camera
    fullName: PlayerRoles.PlayableScps.Scp079.Cameras.Scp079Camera
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: PlayerRoles.PlayableScps.Scp079.Cameras.Scp079Camera
    name: Scp079Camera
    nameWithType: Scp079Camera
    fullName: PlayerRoles.PlayableScps.Scp079.Cameras.Scp079Camera
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: PlayerRoles.PlayableScps.Scp079.Cameras
  commentId: N:PlayerRoles.PlayableScps.Scp079.Cameras
  isExternal: true
  name: PlayerRoles.PlayableScps.Scp079.Cameras
  nameWithType: PlayerRoles.PlayableScps.Scp079.Cameras
  fullName: PlayerRoles.PlayableScps.Scp079.Cameras
- uid: PluginAPI.Core.Map.PocketDimensionTeleports*
  commentId: Overload:PluginAPI.Core.Map.PocketDimensionTeleports
  name: PocketDimensionTeleports
  nameWithType: Map.PocketDimensionTeleports
  fullName: PluginAPI.Core.Map.PocketDimensionTeleports
- uid: System.Collections.Generic.IReadOnlyCollection{PocketDimensionTeleport}
  commentId: T:System.Collections.Generic.IReadOnlyCollection{PocketDimensionTeleport}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IReadOnlyCollection`1
  name: IReadOnlyCollection<PocketDimensionTeleport>
  nameWithType: IReadOnlyCollection<PocketDimensionTeleport>
  fullName: System.Collections.Generic.IReadOnlyCollection<PocketDimensionTeleport>
  nameWithType.vb: IReadOnlyCollection(Of PocketDimensionTeleport)
  fullName.vb: System.Collections.Generic.IReadOnlyCollection(Of PocketDimensionTeleport)
  name.vb: IReadOnlyCollection(Of PocketDimensionTeleport)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: PocketDimensionTeleport
    name: PocketDimensionTeleport
    nameWithType: PocketDimensionTeleport
    fullName: PocketDimensionTeleport
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: PocketDimensionTeleport
    name: PocketDimensionTeleport
    nameWithType: PocketDimensionTeleport
    fullName: PocketDimensionTeleport
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: PluginAPI.Core.Map.Lockers*
  commentId: Overload:PluginAPI.Core.Map.Lockers
  name: Lockers
  nameWithType: Map.Lockers
  fullName: PluginAPI.Core.Map.Lockers
- uid: System.Collections.Generic.IReadOnlyCollection{MapGeneration.Distributors.Locker}
  commentId: T:System.Collections.Generic.IReadOnlyCollection{MapGeneration.Distributors.Locker}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IReadOnlyCollection`1
  name: IReadOnlyCollection<Locker>
  nameWithType: IReadOnlyCollection<Locker>
  fullName: System.Collections.Generic.IReadOnlyCollection<MapGeneration.Distributors.Locker>
  nameWithType.vb: IReadOnlyCollection(Of Locker)
  fullName.vb: System.Collections.Generic.IReadOnlyCollection(Of MapGeneration.Distributors.Locker)
  name.vb: IReadOnlyCollection(Of Locker)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: MapGeneration.Distributors.Locker
    name: Locker
    nameWithType: Locker
    fullName: MapGeneration.Distributors.Locker
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: MapGeneration.Distributors.Locker
    name: Locker
    nameWithType: Locker
    fullName: MapGeneration.Distributors.Locker
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: PluginAPI.Core.Map.Elevators*
  commentId: Overload:PluginAPI.Core.Map.Elevators
  name: Elevators
  nameWithType: Map.Elevators
  fullName: PluginAPI.Core.Map.Elevators
- uid: System.Collections.Generic.IReadOnlyCollection{Interactables.Interobjects.ElevatorChamber}
  commentId: T:System.Collections.Generic.IReadOnlyCollection{Interactables.Interobjects.ElevatorChamber}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IReadOnlyCollection`1
  name: IReadOnlyCollection<ElevatorChamber>
  nameWithType: IReadOnlyCollection<ElevatorChamber>
  fullName: System.Collections.Generic.IReadOnlyCollection<Interactables.Interobjects.ElevatorChamber>
  nameWithType.vb: IReadOnlyCollection(Of ElevatorChamber)
  fullName.vb: System.Collections.Generic.IReadOnlyCollection(Of Interactables.Interobjects.ElevatorChamber)
  name.vb: IReadOnlyCollection(Of ElevatorChamber)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Interactables.Interobjects.ElevatorChamber
    name: ElevatorChamber
    nameWithType: ElevatorChamber
    fullName: Interactables.Interobjects.ElevatorChamber
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Interactables.Interobjects.ElevatorChamber
    name: ElevatorChamber
    nameWithType: ElevatorChamber
    fullName: Interactables.Interobjects.ElevatorChamber
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: PluginAPI.Core.Map.TeslaGates*
  commentId: Overload:PluginAPI.Core.Map.TeslaGates
  name: TeslaGates
  nameWithType: Map.TeslaGates
  fullName: PluginAPI.Core.Map.TeslaGates
- uid: System.Collections.Generic.IReadOnlyCollection{TeslaGate}
  commentId: T:System.Collections.Generic.IReadOnlyCollection{TeslaGate}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IReadOnlyCollection`1
  name: IReadOnlyCollection<TeslaGate>
  nameWithType: IReadOnlyCollection<TeslaGate>
  fullName: System.Collections.Generic.IReadOnlyCollection<TeslaGate>
  nameWithType.vb: IReadOnlyCollection(Of TeslaGate)
  fullName.vb: System.Collections.Generic.IReadOnlyCollection(Of TeslaGate)
  name.vb: IReadOnlyCollection(Of TeslaGate)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: TeslaGate
    name: TeslaGate
    nameWithType: TeslaGate
    fullName: TeslaGate
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: TeslaGate
    name: TeslaGate
    nameWithType: TeslaGate
    fullName: TeslaGate
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: PluginAPI.Core.Map.Generators*
  commentId: Overload:PluginAPI.Core.Map.Generators
  name: Generators
  nameWithType: Map.Generators
  fullName: PluginAPI.Core.Map.Generators
- uid: System.Collections.Generic.IReadOnlyCollection{MapGeneration.Distributors.Scp079Generator}
  commentId: T:System.Collections.Generic.IReadOnlyCollection{MapGeneration.Distributors.Scp079Generator}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IReadOnlyCollection`1
  name: IReadOnlyCollection<Scp079Generator>
  nameWithType: IReadOnlyCollection<Scp079Generator>
  fullName: System.Collections.Generic.IReadOnlyCollection<MapGeneration.Distributors.Scp079Generator>
  nameWithType.vb: IReadOnlyCollection(Of Scp079Generator)
  fullName.vb: System.Collections.Generic.IReadOnlyCollection(Of MapGeneration.Distributors.Scp079Generator)
  name.vb: IReadOnlyCollection(Of Scp079Generator)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: MapGeneration.Distributors.Scp079Generator
    name: Scp079Generator
    nameWithType: Scp079Generator
    fullName: MapGeneration.Distributors.Scp079Generator
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: MapGeneration.Distributors.Scp079Generator
    name: Scp079Generator
    nameWithType: Scp079Generator
    fullName: MapGeneration.Distributors.Scp079Generator
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: PluginAPI.Core.Player
  commentId: T:PluginAPI.Core.Player
  parent: PluginAPI.Core
  name: Player
  nameWithType: Player
  fullName: PluginAPI.Core.Player
- uid: PluginAPI.Core.Map.Broadcast*
  commentId: Overload:PluginAPI.Core.Map.Broadcast
  name: Broadcast
  nameWithType: Map.Broadcast
  fullName: PluginAPI.Core.Map.Broadcast
- uid: System.UInt16
  commentId: T:System.UInt16
  parent: System
  isExternal: true
  name: UInt16
  nameWithType: UInt16
  fullName: System.UInt16
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Broadcast.BroadcastFlags
  commentId: T:Broadcast.BroadcastFlags
  isExternal: true
  name: Broadcast.BroadcastFlags
  nameWithType: Broadcast.BroadcastFlags
  fullName: Broadcast.BroadcastFlags
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: PluginAPI.Core.Map.ClearBroadcasts*
  commentId: Overload:PluginAPI.Core.Map.ClearBroadcasts
  name: ClearBroadcasts
  nameWithType: Map.ClearBroadcasts
  fullName: PluginAPI.Core.Map.ClearBroadcasts
- uid: PluginAPI.Core.Map.ForceDecontamination*
  commentId: Overload:PluginAPI.Core.Map.ForceDecontamination
  name: ForceDecontamination
  nameWithType: Map.ForceDecontamination
  fullName: PluginAPI.Core.Map.ForceDecontamination
- uid: PluginAPI.Core.Map.ForceDecontamination
  commentId: M:PluginAPI.Core.Map.ForceDecontamination
  isExternal: true
- uid: PluginAPI.Core.Map.DecontaminationStatus*
  commentId: Overload:PluginAPI.Core.Map.DecontaminationStatus
  name: DecontaminationStatus
  nameWithType: Map.DecontaminationStatus
  fullName: PluginAPI.Core.Map.DecontaminationStatus
- uid: LightContainmentZoneDecontamination.DecontaminationController.DecontaminationStatus
  commentId: T:LightContainmentZoneDecontamination.DecontaminationController.DecontaminationStatus
  parent: LightContainmentZoneDecontamination
  isExternal: true
  name: DecontaminationController.DecontaminationStatus
  nameWithType: DecontaminationController.DecontaminationStatus
  fullName: LightContainmentZoneDecontamination.DecontaminationController.DecontaminationStatus
- uid: LightContainmentZoneDecontamination
  commentId: N:LightContainmentZoneDecontamination
  isExternal: true
  name: LightContainmentZoneDecontamination
  nameWithType: LightContainmentZoneDecontamination
  fullName: LightContainmentZoneDecontamination
- uid: MapGeneration.RoomIdentifier
  commentId: T:MapGeneration.RoomIdentifier
  parent: MapGeneration
  isExternal: true
  name: RoomIdentifier
  nameWithType: RoomIdentifier
  fullName: MapGeneration.RoomIdentifier
- uid: PluginAPI.Core.Map.GetRandomRoom*
  commentId: Overload:PluginAPI.Core.Map.GetRandomRoom
  name: GetRandomRoom
  nameWithType: Map.GetRandomRoom
  fullName: PluginAPI.Core.Map.GetRandomRoom
- uid: MapGeneration.FacilityZone
  commentId: T:MapGeneration.FacilityZone
  parent: MapGeneration
  isExternal: true
  name: FacilityZone
  nameWithType: FacilityZone
  fullName: MapGeneration.FacilityZone
- uid: MapGeneration
  commentId: N:MapGeneration
  isExternal: true
  name: MapGeneration
  nameWithType: MapGeneration
  fullName: MapGeneration
- uid: PluginAPI.Core.Map.FlickerLights*
  commentId: Overload:PluginAPI.Core.Map.FlickerLights
  name: FlickerLights
  nameWithType: Map.FlickerLights
  fullName: PluginAPI.Core.Map.FlickerLights
- uid: System.Single
  commentId: T:System.Single
  parent: System
  isExternal: true
  name: Single
  nameWithType: Single
  fullName: System.Single
- uid: System.Collections.Generic.IEnumerable{MapGeneration.FacilityZone}
  commentId: T:System.Collections.Generic.IEnumerable{MapGeneration.FacilityZone}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<FacilityZone>
  nameWithType: IEnumerable<FacilityZone>
  fullName: System.Collections.Generic.IEnumerable<MapGeneration.FacilityZone>
  nameWithType.vb: IEnumerable(Of FacilityZone)
  fullName.vb: System.Collections.Generic.IEnumerable(Of MapGeneration.FacilityZone)
  name.vb: IEnumerable(Of FacilityZone)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: MapGeneration.FacilityZone
    name: FacilityZone
    nameWithType: FacilityZone
    fullName: MapGeneration.FacilityZone
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: MapGeneration.FacilityZone
    name: FacilityZone
    nameWithType: FacilityZone
    fullName: MapGeneration.FacilityZone
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: PluginAPI.Core.Map.FlickerAllLights*
  commentId: Overload:PluginAPI.Core.Map.FlickerAllLights
  name: FlickerAllLights
  nameWithType: Map.FlickerAllLights
  fullName: PluginAPI.Core.Map.FlickerAllLights
- uid: PluginAPI.Core.Map.TurnOnAllLights*
  commentId: Overload:PluginAPI.Core.Map.TurnOnAllLights
  name: TurnOnAllLights
  nameWithType: Map.TurnOnAllLights
  fullName: PluginAPI.Core.Map.TurnOnAllLights
- uid: PluginAPI.Core.Map.TurnOnLights*
  commentId: Overload:PluginAPI.Core.Map.TurnOnLights
  name: TurnOnLights
  nameWithType: Map.TurnOnLights
  fullName: PluginAPI.Core.Map.TurnOnLights
- uid: UnityEngine.Color
  commentId: T:UnityEngine.Color
  parent: UnityEngine
  isExternal: true
  name: Color
  nameWithType: Color
  fullName: UnityEngine.Color
- uid: PluginAPI.Core.Map.ChangeColorOfAllLights*
  commentId: Overload:PluginAPI.Core.Map.ChangeColorOfAllLights
  name: ChangeColorOfAllLights
  nameWithType: Map.ChangeColorOfAllLights
  fullName: PluginAPI.Core.Map.ChangeColorOfAllLights
- uid: UnityEngine
  commentId: N:UnityEngine
  isExternal: true
  name: UnityEngine
  nameWithType: UnityEngine
  fullName: UnityEngine
- uid: PluginAPI.Core.Map.ChangeColorOfLights*
  commentId: Overload:PluginAPI.Core.Map.ChangeColorOfLights
  name: ChangeColorOfLights
  nameWithType: Map.ChangeColorOfLights
  fullName: PluginAPI.Core.Map.ChangeColorOfLights
- uid: PluginAPI.Core.Map.ResetColorOfAllLights*
  commentId: Overload:PluginAPI.Core.Map.ResetColorOfAllLights
  name: ResetColorOfAllLights
  nameWithType: Map.ResetColorOfAllLights
  fullName: PluginAPI.Core.Map.ResetColorOfAllLights
- uid: PluginAPI.Core.Map.ResetColorOfLights*
  commentId: Overload:PluginAPI.Core.Map.ResetColorOfLights
  name: ResetColorOfLights
  nameWithType: Map.ResetColorOfLights
  fullName: PluginAPI.Core.Map.ResetColorOfLights
