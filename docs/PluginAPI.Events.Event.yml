### YamlMime:ManagedReference
items:
- uid: PluginAPI.Events.Event
  commentId: T:PluginAPI.Events.Event
  id: Event
  parent: PluginAPI.Events
  children:
  - PluginAPI.Events.Event.#ctor(PluginAPI.Events.IEventArguments)
  - PluginAPI.Events.Event.EventArg
  - PluginAPI.Events.Event.EventArgType
  - PluginAPI.Events.Event.Invokers
  - PluginAPI.Events.Event.Parameters
  - PluginAPI.Events.Event.RegisterInvoker(System.Type,System.Object,System.Reflection.MethodInfo,System.Boolean)
  langs:
  - csharp
  - vb
  name: Event
  nameWithType: Event
  fullName: PluginAPI.Events.Event
  type: Class
  source:
    remote:
      path: NwPluginAPI/Events/Event.cs
      branch: 13.0.0
      repo: https://github.com/northwood-studios/NwPluginAPI.git
    id: Event
    path: ../NwPluginAPI/Events/Event.cs
    startLine: 13
  assemblies:
  - PluginAPI
  namespace: PluginAPI.Events
  summary: "\nRepresents an event.\n"
  example: []
  syntax:
    content: public class Event
    content.vb: Public Class Event
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: PluginAPI.Events.Event.Invokers
  commentId: F:PluginAPI.Events.Event.Invokers
  id: Invokers
  parent: PluginAPI.Events.Event
  langs:
  - csharp
  - vb
  name: Invokers
  nameWithType: Event.Invokers
  fullName: PluginAPI.Events.Event.Invokers
  type: Field
  source:
    remote:
      path: NwPluginAPI/Events/Event.cs
      branch: 13.0.0
      repo: https://github.com/northwood-studios/NwPluginAPI.git
    id: Invokers
    path: ../NwPluginAPI/Events/Event.cs
    startLine: 26
  assemblies:
  - PluginAPI
  namespace: PluginAPI.Events
  syntax:
    content: public readonly Dictionary<Type, List<EventInvokeLocation>> Invokers
    return:
      type: System.Collections.Generic.Dictionary{System.Type,System.Collections.Generic.List{PluginAPI.Events.EventInvokeLocation}}
    content.vb: Public ReadOnly Invokers As Dictionary(Of Type, List(Of EventInvokeLocation))
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: PluginAPI.Events.Event.Parameters
  commentId: F:PluginAPI.Events.Event.Parameters
  id: Parameters
  parent: PluginAPI.Events.Event
  langs:
  - csharp
  - vb
  name: Parameters
  nameWithType: Event.Parameters
  fullName: PluginAPI.Events.Event.Parameters
  type: Field
  source:
    remote:
      path: NwPluginAPI/Events/Event.cs
      branch: 13.0.0
      repo: https://github.com/northwood-studios/NwPluginAPI.git
    id: Parameters
    path: ../NwPluginAPI/Events/Event.cs
    startLine: 28
  assemblies:
  - PluginAPI
  namespace: PluginAPI.Events
  syntax:
    content: public readonly List<EventParameter> Parameters
    return:
      type: System.Collections.Generic.List{PluginAPI.Events.EventParameter}
    content.vb: Public ReadOnly Parameters As List(Of EventParameter)
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: PluginAPI.Events.Event.EventArg
  commentId: F:PluginAPI.Events.Event.EventArg
  id: EventArg
  parent: PluginAPI.Events.Event
  langs:
  - csharp
  - vb
  name: EventArg
  nameWithType: Event.EventArg
  fullName: PluginAPI.Events.Event.EventArg
  type: Field
  source:
    remote:
      path: NwPluginAPI/Events/Event.cs
      branch: 13.0.0
      repo: https://github.com/northwood-studios/NwPluginAPI.git
    id: EventArg
    path: ../NwPluginAPI/Events/Event.cs
    startLine: 30
  assemblies:
  - PluginAPI
  namespace: PluginAPI.Events
  syntax:
    content: public readonly IEventArguments EventArg
    return:
      type: PluginAPI.Events.IEventArguments
    content.vb: Public ReadOnly EventArg As IEventArguments
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: PluginAPI.Events.Event.EventArgType
  commentId: F:PluginAPI.Events.Event.EventArgType
  id: EventArgType
  parent: PluginAPI.Events.Event
  langs:
  - csharp
  - vb
  name: EventArgType
  nameWithType: Event.EventArgType
  fullName: PluginAPI.Events.Event.EventArgType
  type: Field
  source:
    remote:
      path: NwPluginAPI/Events/Event.cs
      branch: 13.0.0
      repo: https://github.com/northwood-studios/NwPluginAPI.git
    id: EventArgType
    path: ../NwPluginAPI/Events/Event.cs
    startLine: 31
  assemblies:
  - PluginAPI
  namespace: PluginAPI.Events
  syntax:
    content: public readonly Type EventArgType
    return:
      type: System.Type
    content.vb: Public ReadOnly EventArgType As Type
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: PluginAPI.Events.Event.#ctor(PluginAPI.Events.IEventArguments)
  commentId: M:PluginAPI.Events.Event.#ctor(PluginAPI.Events.IEventArguments)
  id: '#ctor(PluginAPI.Events.IEventArguments)'
  parent: PluginAPI.Events.Event
  langs:
  - csharp
  - vb
  name: Event(IEventArguments)
  nameWithType: Event.Event(IEventArguments)
  fullName: PluginAPI.Events.Event.Event(PluginAPI.Events.IEventArguments)
  type: Constructor
  source:
    remote:
      path: NwPluginAPI/Events/Event.cs
      branch: 13.0.0
      repo: https://github.com/northwood-studios/NwPluginAPI.git
    id: .ctor
    path: ../NwPluginAPI/Events/Event.cs
    startLine: 37
  assemblies:
  - PluginAPI
  namespace: PluginAPI.Events
  summary: "\nInitializes a new instance of the <xref href=\"PluginAPI.Events.Event\" data-throw-if-not-resolved=\"false\"></xref> class.\n"
  example: []
  syntax:
    content: public Event(IEventArguments args)
    parameters:
    - id: args
      type: PluginAPI.Events.IEventArguments
    content.vb: Public Sub New(args As IEventArguments)
  overload: PluginAPI.Events.Event.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: PluginAPI.Events.Event.RegisterInvoker(System.Type,System.Object,System.Reflection.MethodInfo,System.Boolean)
  commentId: M:PluginAPI.Events.Event.RegisterInvoker(System.Type,System.Object,System.Reflection.MethodInfo,System.Boolean)
  id: RegisterInvoker(System.Type,System.Object,System.Reflection.MethodInfo,System.Boolean)
  parent: PluginAPI.Events.Event
  langs:
  - csharp
  - vb
  name: RegisterInvoker(Type, Object, MethodInfo, Boolean)
  nameWithType: Event.RegisterInvoker(Type, Object, MethodInfo, Boolean)
  fullName: PluginAPI.Events.Event.RegisterInvoker(System.Type, System.Object, System.Reflection.MethodInfo, System.Boolean)
  type: Method
  source:
    remote:
      path: NwPluginAPI/Events/Event.cs
      branch: 13.0.0
      repo: https://github.com/northwood-studios/NwPluginAPI.git
    id: RegisterInvoker
    path: ../NwPluginAPI/Events/Event.cs
    startLine: 59
  assemblies:
  - PluginAPI
  namespace: PluginAPI.Events
  summary: "\nRegisters a event handler.\n"
  example: []
  syntax:
    content: public void RegisterInvoker(Type plugin, object handle, MethodInfo method, bool defaultMethod)
    parameters:
    - id: plugin
      type: System.Type
      description: The plugin of the handler.
    - id: handle
      type: System.Object
      description: The handle.
    - id: method
      type: System.Reflection.MethodInfo
      description: The method.
    - id: defaultMethod
      type: System.Boolean
      description: The default method.
    content.vb: Public Sub RegisterInvoker(plugin As Type, handle As Object, method As MethodInfo, defaultMethod As Boolean)
  overload: PluginAPI.Events.Event.RegisterInvoker*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: PluginAPI.Events
  commentId: N:PluginAPI.Events
  name: PluginAPI.Events
  nameWithType: PluginAPI.Events
  fullName: PluginAPI.Events
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: System.Collections.Generic.Dictionary{System.Type,System.Collections.Generic.List{PluginAPI.Events.EventInvokeLocation}}
  commentId: T:System.Collections.Generic.Dictionary{System.Type,System.Collections.Generic.List{PluginAPI.Events.EventInvokeLocation}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.Dictionary`2
  name: Dictionary<Type, List<EventInvokeLocation>>
  nameWithType: Dictionary<Type, List<EventInvokeLocation>>
  fullName: System.Collections.Generic.Dictionary<System.Type, System.Collections.Generic.List<PluginAPI.Events.EventInvokeLocation>>
  nameWithType.vb: Dictionary(Of Type, List(Of EventInvokeLocation))
  fullName.vb: System.Collections.Generic.Dictionary(Of System.Type, System.Collections.Generic.List(Of PluginAPI.Events.EventInvokeLocation))
  name.vb: Dictionary(Of Type, List(Of EventInvokeLocation))
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: PluginAPI.Events.EventInvokeLocation
    name: EventInvokeLocation
    nameWithType: EventInvokeLocation
    fullName: PluginAPI.Events.EventInvokeLocation
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: PluginAPI.Events.EventInvokeLocation
    name: EventInvokeLocation
    nameWithType: EventInvokeLocation
    fullName: PluginAPI.Events.EventInvokeLocation
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.Dictionary`2
  commentId: T:System.Collections.Generic.Dictionary`2
  isExternal: true
  name: Dictionary<TKey, TValue>
  nameWithType: Dictionary<TKey, TValue>
  fullName: System.Collections.Generic.Dictionary<TKey, TValue>
  nameWithType.vb: Dictionary(Of TKey, TValue)
  fullName.vb: System.Collections.Generic.Dictionary(Of TKey, TValue)
  name.vb: Dictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.Collections.Generic.List{PluginAPI.Events.EventParameter}
  commentId: T:System.Collections.Generic.List{PluginAPI.Events.EventParameter}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<EventParameter>
  nameWithType: List<EventParameter>
  fullName: System.Collections.Generic.List<PluginAPI.Events.EventParameter>
  nameWithType.vb: List(Of EventParameter)
  fullName.vb: System.Collections.Generic.List(Of PluginAPI.Events.EventParameter)
  name.vb: List(Of EventParameter)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: PluginAPI.Events.EventParameter
    name: EventParameter
    nameWithType: EventParameter
    fullName: PluginAPI.Events.EventParameter
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: PluginAPI.Events.EventParameter
    name: EventParameter
    nameWithType: EventParameter
    fullName: PluginAPI.Events.EventParameter
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  isExternal: true
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: PluginAPI.Events.IEventArguments
  commentId: T:PluginAPI.Events.IEventArguments
  parent: PluginAPI.Events
  name: IEventArguments
  nameWithType: IEventArguments
  fullName: PluginAPI.Events.IEventArguments
- uid: System.Type
  commentId: T:System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: PluginAPI.Events.Event
  commentId: T:PluginAPI.Events.Event
  name: Event
  nameWithType: Event
  fullName: PluginAPI.Events.Event
- uid: PluginAPI.Events.Event.#ctor*
  commentId: Overload:PluginAPI.Events.Event.#ctor
  name: Event
  nameWithType: Event.Event
  fullName: PluginAPI.Events.Event.Event
- uid: PluginAPI.Events.Event.RegisterInvoker*
  commentId: Overload:PluginAPI.Events.Event.RegisterInvoker
  name: RegisterInvoker
  nameWithType: Event.RegisterInvoker
  fullName: PluginAPI.Events.Event.RegisterInvoker
- uid: System.Reflection.MethodInfo
  commentId: T:System.Reflection.MethodInfo
  parent: System.Reflection
  isExternal: true
  name: MethodInfo
  nameWithType: MethodInfo
  fullName: System.Reflection.MethodInfo
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Reflection
  commentId: N:System.Reflection
  isExternal: true
  name: System.Reflection
  nameWithType: System.Reflection
  fullName: System.Reflection
