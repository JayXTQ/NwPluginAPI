### YamlMime:ManagedReference
items:
- uid: PluginAPI.Core.Zones.UnknownZone
  commentId: T:PluginAPI.Core.Zones.UnknownZone
  id: UnknownZone
  parent: PluginAPI.Core.Zones
  children:
  - PluginAPI.Core.Zones.UnknownZone.#ctor
  - PluginAPI.Core.Zones.UnknownZone.Doors
  - PluginAPI.Core.Zones.UnknownZone.GetRooms``1
  - PluginAPI.Core.Zones.UnknownZone.Rooms
  - PluginAPI.Core.Zones.UnknownZone.TryGetRoom(MapGeneration.RoomIdentifier,PluginAPI.Core.Zones.FacilityRoom@)
  - PluginAPI.Core.Zones.UnknownZone.ZoneType
  langs:
  - csharp
  - vb
  name: UnknownZone
  nameWithType: UnknownZone
  fullName: PluginAPI.Core.Zones.UnknownZone
  type: Class
  source:
    remote:
      path: NwPluginAPI/Core/Zones/UnknownZone.cs
      branch: 13.0.0
      repo: https://github.com/northwood-studios/NwPluginAPI.git
    id: UnknownZone
    path: ../NwPluginAPI/Core/Zones/UnknownZone.cs
    startLine: 10
  assemblies:
  - PluginAPI
  namespace: PluginAPI.Core.Zones
  summary: "\nRepresents a unknown zone in facility.\n"
  example: []
  syntax:
    content: 'public class UnknownZone : FacilityZone'
    content.vb: >-
      Public Class UnknownZone
          Inherits FacilityZone
  inheritance:
  - System.Object
  - PluginAPI.Core.Zones.FacilityZone
  inheritedMembers:
  - PluginAPI.Core.Zones.FacilityZone.GetRooms
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: PluginAPI.Core.Zones.UnknownZone.ZoneType
  commentId: P:PluginAPI.Core.Zones.UnknownZone.ZoneType
  id: ZoneType
  parent: PluginAPI.Core.Zones.UnknownZone
  langs:
  - csharp
  - vb
  name: ZoneType
  nameWithType: UnknownZone.ZoneType
  fullName: PluginAPI.Core.Zones.UnknownZone.ZoneType
  type: Property
  source:
    remote:
      path: NwPluginAPI/Core/Zones/UnknownZone.cs
      branch: 13.0.0
      repo: https://github.com/northwood-studios/NwPluginAPI.git
    id: ZoneType
    path: ../NwPluginAPI/Core/Zones/UnknownZone.cs
    startLine: 16
  assemblies:
  - PluginAPI
  namespace: PluginAPI.Core.Zones
  summary: "\nGets the zone type.\n"
  example: []
  syntax:
    content: public override FacilityZone ZoneType { get; }
    parameters: []
    return:
      type: MapGeneration.FacilityZone
    content.vb: Public Overrides ReadOnly Property ZoneType As FacilityZone
  overridden: PluginAPI.Core.Zones.FacilityZone.ZoneType
  overload: PluginAPI.Core.Zones.UnknownZone.ZoneType*
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
- uid: PluginAPI.Core.Zones.UnknownZone.GetRooms``1
  commentId: M:PluginAPI.Core.Zones.UnknownZone.GetRooms``1
  id: GetRooms``1
  parent: PluginAPI.Core.Zones.UnknownZone
  langs:
  - csharp
  - vb
  name: GetRooms<T>()
  nameWithType: UnknownZone.GetRooms<T>()
  fullName: PluginAPI.Core.Zones.UnknownZone.GetRooms<T>()
  type: Method
  source:
    remote:
      path: NwPluginAPI/Core/Zones/UnknownZone.cs
      branch: 13.0.0
      repo: https://github.com/northwood-studios/NwPluginAPI.git
    id: GetRooms
    path: ../NwPluginAPI/Core/Zones/UnknownZone.cs
    startLine: 19
  assemblies:
  - PluginAPI
  namespace: PluginAPI.Core.Zones
  summary: "\nGets all rooms of specific type.\n"
  example: []
  syntax:
    content: >-
      public override List<T> GetRooms<T>()
          where T : FacilityRoom
    typeParameters:
    - id: T
      description: The type of rooms.
    return:
      type: System.Collections.Generic.List{{T}}
      description: List of all rooms.
    content.vb: Public Overrides Function GetRooms(Of T As FacilityRoom) As List(Of T)
  overridden: PluginAPI.Core.Zones.FacilityZone.GetRooms``1
  overload: PluginAPI.Core.Zones.UnknownZone.GetRooms*
  nameWithType.vb: UnknownZone.GetRooms(Of T)()
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
  fullName.vb: PluginAPI.Core.Zones.UnknownZone.GetRooms(Of T)()
  name.vb: GetRooms(Of T)()
- uid: PluginAPI.Core.Zones.UnknownZone.Rooms
  commentId: P:PluginAPI.Core.Zones.UnknownZone.Rooms
  id: Rooms
  parent: PluginAPI.Core.Zones.UnknownZone
  langs:
  - csharp
  - vb
  name: Rooms
  nameWithType: UnknownZone.Rooms
  fullName: PluginAPI.Core.Zones.UnknownZone.Rooms
  type: Property
  source:
    remote:
      path: NwPluginAPI/Core/Zones/UnknownZone.cs
      branch: 13.0.0
      repo: https://github.com/northwood-studios/NwPluginAPI.git
    id: Rooms
    path: ../NwPluginAPI/Core/Zones/UnknownZone.cs
    startLine: 24
  assemblies:
  - PluginAPI
  namespace: PluginAPI.Core.Zones
  summary: "\nGets all rooms in unknown zone.\n"
  example: []
  syntax:
    content: public static List<FacilityRoom> Rooms { get; }
    parameters: []
    return:
      type: System.Collections.Generic.List{PluginAPI.Core.Zones.FacilityRoom}
    content.vb: Public Shared ReadOnly Property Rooms As List(Of FacilityRoom)
  overload: PluginAPI.Core.Zones.UnknownZone.Rooms*
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: PluginAPI.Core.Zones.UnknownZone.Doors
  commentId: P:PluginAPI.Core.Zones.UnknownZone.Doors
  id: Doors
  parent: PluginAPI.Core.Zones.UnknownZone
  langs:
  - csharp
  - vb
  name: Doors
  nameWithType: UnknownZone.Doors
  fullName: PluginAPI.Core.Zones.UnknownZone.Doors
  type: Property
  source:
    remote:
      path: NwPluginAPI/Core/Zones/UnknownZone.cs
      branch: 13.0.0
      repo: https://github.com/northwood-studios/NwPluginAPI.git
    id: Doors
    path: ../NwPluginAPI/Core/Zones/UnknownZone.cs
    startLine: 29
  assemblies:
  - PluginAPI
  namespace: PluginAPI.Core.Zones
  summary: "\nGets all doors in unknown zone.\n"
  example: []
  syntax:
    content: public static List<FacilityDoor> Doors { get; }
    parameters: []
    return:
      type: System.Collections.Generic.List{PluginAPI.Core.Doors.FacilityDoor}
    content.vb: Public Shared ReadOnly Property Doors As List(Of FacilityDoor)
  overload: PluginAPI.Core.Zones.UnknownZone.Doors*
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: PluginAPI.Core.Zones.UnknownZone.TryGetRoom(MapGeneration.RoomIdentifier,PluginAPI.Core.Zones.FacilityRoom@)
  commentId: M:PluginAPI.Core.Zones.UnknownZone.TryGetRoom(MapGeneration.RoomIdentifier,PluginAPI.Core.Zones.FacilityRoom@)
  id: TryGetRoom(MapGeneration.RoomIdentifier,PluginAPI.Core.Zones.FacilityRoom@)
  parent: PluginAPI.Core.Zones.UnknownZone
  langs:
  - csharp
  - vb
  name: TryGetRoom(RoomIdentifier, out FacilityRoom)
  nameWithType: UnknownZone.TryGetRoom(RoomIdentifier, out FacilityRoom)
  fullName: PluginAPI.Core.Zones.UnknownZone.TryGetRoom(MapGeneration.RoomIdentifier, out PluginAPI.Core.Zones.FacilityRoom)
  type: Method
  source:
    remote:
      path: NwPluginAPI/Core/Zones/UnknownZone.cs
      branch: 13.0.0
      repo: https://github.com/northwood-studios/NwPluginAPI.git
    id: TryGetRoom
    path: ../NwPluginAPI/Core/Zones/UnknownZone.cs
    startLine: 32
  assemblies:
  - PluginAPI
  namespace: PluginAPI.Core.Zones
  summary: "\nGets surface room from room identifier.\n"
  example: []
  syntax:
    content: public override bool TryGetRoom(RoomIdentifier roomIdentity, out FacilityRoom room)
    parameters:
    - id: roomIdentity
      type: MapGeneration.RoomIdentifier
      description: The room identifier.
    - id: room
      type: PluginAPI.Core.Zones.FacilityRoom
      description: The facility room.
    return:
      type: System.Boolean
      description: Whether or not the room was found.
    content.vb: Public Overrides Function TryGetRoom(roomIdentity As RoomIdentifier, ByRef room As FacilityRoom) As Boolean
  overridden: PluginAPI.Core.Zones.FacilityZone.TryGetRoom(MapGeneration.RoomIdentifier,PluginAPI.Core.Zones.FacilityRoom@)
  overload: PluginAPI.Core.Zones.UnknownZone.TryGetRoom*
  nameWithType.vb: UnknownZone.TryGetRoom(RoomIdentifier, ByRef FacilityRoom)
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
  fullName.vb: PluginAPI.Core.Zones.UnknownZone.TryGetRoom(MapGeneration.RoomIdentifier, ByRef PluginAPI.Core.Zones.FacilityRoom)
  name.vb: TryGetRoom(RoomIdentifier, ByRef FacilityRoom)
- uid: PluginAPI.Core.Zones.UnknownZone.#ctor
  commentId: M:PluginAPI.Core.Zones.UnknownZone.#ctor
  id: '#ctor'
  parent: PluginAPI.Core.Zones.UnknownZone
  langs:
  - csharp
  - vb
  name: UnknownZone()
  nameWithType: UnknownZone.UnknownZone()
  fullName: PluginAPI.Core.Zones.UnknownZone.UnknownZone()
  type: Constructor
  source:
    remote:
      path: NwPluginAPI/Core/Zones/UnknownZone.cs
      branch: 13.0.0
      repo: https://github.com/northwood-studios/NwPluginAPI.git
    id: .ctor
    path: ../NwPluginAPI/Core/Zones/UnknownZone.cs
    startLine: 56
  assemblies:
  - PluginAPI
  namespace: PluginAPI.Core.Zones
  summary: "\nInitializes a new instance of the <xref href=\"PluginAPI.Core.Zones.UnknownZone\" data-throw-if-not-resolved=\"false\"></xref> class.\n"
  example: []
  syntax:
    content: public UnknownZone()
    content.vb: Public Sub New
  overload: PluginAPI.Core.Zones.UnknownZone.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: PluginAPI.Core.Zones
  commentId: N:PluginAPI.Core.Zones
  name: PluginAPI.Core.Zones
  nameWithType: PluginAPI.Core.Zones
  fullName: PluginAPI.Core.Zones
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: PluginAPI.Core.Zones.FacilityZone
  commentId: T:PluginAPI.Core.Zones.FacilityZone
  parent: PluginAPI.Core.Zones
  name: FacilityZone
  nameWithType: FacilityZone
  fullName: PluginAPI.Core.Zones.FacilityZone
- uid: PluginAPI.Core.Zones.FacilityZone.GetRooms
  commentId: M:PluginAPI.Core.Zones.FacilityZone.GetRooms
  parent: PluginAPI.Core.Zones.FacilityZone
  name: GetRooms()
  nameWithType: FacilityZone.GetRooms()
  fullName: PluginAPI.Core.Zones.FacilityZone.GetRooms()
  spec.csharp:
  - uid: PluginAPI.Core.Zones.FacilityZone.GetRooms
    name: GetRooms
    nameWithType: FacilityZone.GetRooms
    fullName: PluginAPI.Core.Zones.FacilityZone.GetRooms
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: PluginAPI.Core.Zones.FacilityZone.GetRooms
    name: GetRooms
    nameWithType: FacilityZone.GetRooms
    fullName: PluginAPI.Core.Zones.FacilityZone.GetRooms
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: PluginAPI.Core.Zones.FacilityZone.ZoneType
  commentId: P:PluginAPI.Core.Zones.FacilityZone.ZoneType
  parent: PluginAPI.Core.Zones.FacilityZone
  name: ZoneType
  nameWithType: FacilityZone.ZoneType
  fullName: PluginAPI.Core.Zones.FacilityZone.ZoneType
- uid: PluginAPI.Core.Zones.UnknownZone.ZoneType*
  commentId: Overload:PluginAPI.Core.Zones.UnknownZone.ZoneType
  name: ZoneType
  nameWithType: UnknownZone.ZoneType
  fullName: PluginAPI.Core.Zones.UnknownZone.ZoneType
- uid: MapGeneration.FacilityZone
  commentId: T:MapGeneration.FacilityZone
  parent: MapGeneration
  isExternal: true
  name: FacilityZone
  nameWithType: FacilityZone
  fullName: MapGeneration.FacilityZone
- uid: MapGeneration
  commentId: N:MapGeneration
  isExternal: true
  name: MapGeneration
  nameWithType: MapGeneration
  fullName: MapGeneration
- uid: PluginAPI.Core.Zones.FacilityZone.GetRooms``1
  commentId: M:PluginAPI.Core.Zones.FacilityZone.GetRooms``1
  parent: PluginAPI.Core.Zones.FacilityZone
  name: GetRooms<T>()
  nameWithType: FacilityZone.GetRooms<T>()
  fullName: PluginAPI.Core.Zones.FacilityZone.GetRooms<T>()
  nameWithType.vb: FacilityZone.GetRooms(Of T)()
  fullName.vb: PluginAPI.Core.Zones.FacilityZone.GetRooms(Of T)()
  name.vb: GetRooms(Of T)()
  spec.csharp:
  - uid: PluginAPI.Core.Zones.FacilityZone.GetRooms``1
    name: GetRooms<T>
    nameWithType: FacilityZone.GetRooms<T>
    fullName: PluginAPI.Core.Zones.FacilityZone.GetRooms<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: PluginAPI.Core.Zones.FacilityZone.GetRooms``1
    name: GetRooms(Of T)
    nameWithType: FacilityZone.GetRooms(Of T)
    fullName: PluginAPI.Core.Zones.FacilityZone.GetRooms(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: PluginAPI.Core.Zones.UnknownZone.GetRooms*
  commentId: Overload:PluginAPI.Core.Zones.UnknownZone.GetRooms
  name: GetRooms
  nameWithType: UnknownZone.GetRooms
  fullName: PluginAPI.Core.Zones.UnknownZone.GetRooms
- uid: System.Collections.Generic.List{{T}}
  commentId: T:System.Collections.Generic.List{``0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  isExternal: true
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: PluginAPI.Core.Zones.UnknownZone.Rooms*
  commentId: Overload:PluginAPI.Core.Zones.UnknownZone.Rooms
  name: Rooms
  nameWithType: UnknownZone.Rooms
  fullName: PluginAPI.Core.Zones.UnknownZone.Rooms
- uid: System.Collections.Generic.List{PluginAPI.Core.Zones.FacilityRoom}
  commentId: T:System.Collections.Generic.List{PluginAPI.Core.Zones.FacilityRoom}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<FacilityRoom>
  nameWithType: List<FacilityRoom>
  fullName: System.Collections.Generic.List<PluginAPI.Core.Zones.FacilityRoom>
  nameWithType.vb: List(Of FacilityRoom)
  fullName.vb: System.Collections.Generic.List(Of PluginAPI.Core.Zones.FacilityRoom)
  name.vb: List(Of FacilityRoom)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: PluginAPI.Core.Zones.FacilityRoom
    name: FacilityRoom
    nameWithType: FacilityRoom
    fullName: PluginAPI.Core.Zones.FacilityRoom
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: PluginAPI.Core.Zones.FacilityRoom
    name: FacilityRoom
    nameWithType: FacilityRoom
    fullName: PluginAPI.Core.Zones.FacilityRoom
  - name: )
    nameWithType: )
    fullName: )
- uid: PluginAPI.Core.Zones.UnknownZone.Doors*
  commentId: Overload:PluginAPI.Core.Zones.UnknownZone.Doors
  name: Doors
  nameWithType: UnknownZone.Doors
  fullName: PluginAPI.Core.Zones.UnknownZone.Doors
- uid: System.Collections.Generic.List{PluginAPI.Core.Doors.FacilityDoor}
  commentId: T:System.Collections.Generic.List{PluginAPI.Core.Doors.FacilityDoor}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<FacilityDoor>
  nameWithType: List<FacilityDoor>
  fullName: System.Collections.Generic.List<PluginAPI.Core.Doors.FacilityDoor>
  nameWithType.vb: List(Of FacilityDoor)
  fullName.vb: System.Collections.Generic.List(Of PluginAPI.Core.Doors.FacilityDoor)
  name.vb: List(Of FacilityDoor)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: PluginAPI.Core.Doors.FacilityDoor
    name: FacilityDoor
    nameWithType: FacilityDoor
    fullName: PluginAPI.Core.Doors.FacilityDoor
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: PluginAPI.Core.Doors.FacilityDoor
    name: FacilityDoor
    nameWithType: FacilityDoor
    fullName: PluginAPI.Core.Doors.FacilityDoor
  - name: )
    nameWithType: )
    fullName: )
- uid: PluginAPI.Core.Zones.FacilityZone.TryGetRoom(MapGeneration.RoomIdentifier,PluginAPI.Core.Zones.FacilityRoom@)
  commentId: M:PluginAPI.Core.Zones.FacilityZone.TryGetRoom(MapGeneration.RoomIdentifier,PluginAPI.Core.Zones.FacilityRoom@)
  parent: PluginAPI.Core.Zones.FacilityZone
  isExternal: true
  name: TryGetRoom(RoomIdentifier, FacilityRoom)
  nameWithType: FacilityZone.TryGetRoom(RoomIdentifier, FacilityRoom)
  fullName: PluginAPI.Core.Zones.FacilityZone.TryGetRoom(MapGeneration.RoomIdentifier, PluginAPI.Core.Zones.FacilityRoom)
  spec.csharp:
  - uid: PluginAPI.Core.Zones.FacilityZone.TryGetRoom(MapGeneration.RoomIdentifier,PluginAPI.Core.Zones.FacilityRoom@)
    name: TryGetRoom
    nameWithType: FacilityZone.TryGetRoom
    fullName: PluginAPI.Core.Zones.FacilityZone.TryGetRoom
  - name: (
    nameWithType: (
    fullName: (
  - uid: MapGeneration.RoomIdentifier
    name: RoomIdentifier
    nameWithType: RoomIdentifier
    fullName: MapGeneration.RoomIdentifier
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: PluginAPI.Core.Zones.FacilityRoom
    name: FacilityRoom
    nameWithType: FacilityRoom
    fullName: PluginAPI.Core.Zones.FacilityRoom
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: PluginAPI.Core.Zones.FacilityZone.TryGetRoom(MapGeneration.RoomIdentifier,PluginAPI.Core.Zones.FacilityRoom@)
    name: TryGetRoom
    nameWithType: FacilityZone.TryGetRoom
    fullName: PluginAPI.Core.Zones.FacilityZone.TryGetRoom
  - name: (
    nameWithType: (
    fullName: (
  - uid: MapGeneration.RoomIdentifier
    name: RoomIdentifier
    nameWithType: RoomIdentifier
    fullName: MapGeneration.RoomIdentifier
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: PluginAPI.Core.Zones.FacilityRoom
    name: FacilityRoom
    nameWithType: FacilityRoom
    fullName: PluginAPI.Core.Zones.FacilityRoom
  - name: )
    nameWithType: )
    fullName: )
- uid: PluginAPI.Core.Zones.UnknownZone.TryGetRoom*
  commentId: Overload:PluginAPI.Core.Zones.UnknownZone.TryGetRoom
  name: TryGetRoom
  nameWithType: UnknownZone.TryGetRoom
  fullName: PluginAPI.Core.Zones.UnknownZone.TryGetRoom
- uid: MapGeneration.RoomIdentifier
  commentId: T:MapGeneration.RoomIdentifier
  parent: MapGeneration
  isExternal: true
  name: RoomIdentifier
  nameWithType: RoomIdentifier
  fullName: MapGeneration.RoomIdentifier
- uid: PluginAPI.Core.Zones.FacilityRoom
  commentId: T:PluginAPI.Core.Zones.FacilityRoom
  parent: PluginAPI.Core.Zones
  name: FacilityRoom
  nameWithType: FacilityRoom
  fullName: PluginAPI.Core.Zones.FacilityRoom
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: PluginAPI.Core.Zones.UnknownZone
  commentId: T:PluginAPI.Core.Zones.UnknownZone
  parent: PluginAPI.Core.Zones
  name: UnknownZone
  nameWithType: UnknownZone
  fullName: PluginAPI.Core.Zones.UnknownZone
- uid: PluginAPI.Core.Zones.UnknownZone.#ctor*
  commentId: Overload:PluginAPI.Core.Zones.UnknownZone.#ctor
  name: UnknownZone
  nameWithType: UnknownZone.UnknownZone
  fullName: PluginAPI.Core.Zones.UnknownZone.UnknownZone
