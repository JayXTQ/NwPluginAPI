### YamlMime:ManagedReference
items:
- uid: PluginAPI.Roles.Scp049`1
  commentId: T:PluginAPI.Roles.Scp049`1
  id: Scp049`1
  parent: PluginAPI.Roles
  children:
  - PluginAPI.Roles.Scp049`1.#ctor(PlayerRoles.PlayableScps.Scp049.Scp049Role)
  - PluginAPI.Roles.Scp049`1.AttackPlayer(`0)
  - PluginAPI.Roles.Scp049`1.CallZombies(System.Single@)
  - PluginAPI.Roles.Scp049`1.ChasePlayer(`0)
  - PluginAPI.Roles.Scp049`1.InfectPlayer(`0)
  - PluginAPI.Roles.Scp049`1.ReceiveSound(PlayerRoles.PlayableScps.Scp049.Scp049AudioPlayer.SoundType@)
  - PluginAPI.Roles.Scp049`1.RoleBase
  - PluginAPI.Roles.Scp049`1.SenseAbility
  - PluginAPI.Roles.Scp049`1.Target
  langs:
  - csharp
  - vb
  name: Scp049<TPlayer>
  nameWithType: Scp049<TPlayer>
  fullName: PluginAPI.Roles.Scp049<TPlayer>
  type: Class
  source:
    remote:
      path: NwPluginAPI/Roles/Scps/Scp049.cs
      branch: 13.0.0
      repo: https://github.com/northwood-studios/NwPluginAPI.git
    id: Scp049
    path: ../NwPluginAPI/Roles/Scps/Scp049.cs
    startLine: 6
  assemblies:
  - PluginAPI
  namespace: PluginAPI.Roles
  syntax:
    content: 'public class Scp049<TPlayer> : BaseScp<TPlayer> where TPlayer : Player'
    typeParameters:
    - id: TPlayer
    content.vb: >-
      Public Class Scp049(Of TPlayer As Player)
          Inherits BaseScp(Of TPlayer)
  inheritance:
  - System.Object
  - PluginAPI.Roles.BaseRole{{TPlayer}}
  - PluginAPI.Roles.BaseScp{{TPlayer}}
  inheritedMembers:
  - PluginAPI.Roles.BaseRole{{TPlayer}}.Player
  - PluginAPI.Roles.BaseRole{{TPlayer}}.RoleId
  - PluginAPI.Roles.BaseRole{{TPlayer}}.RoleName
  - PluginAPI.Roles.BaseRole{{TPlayer}}.RoleColor
  - PluginAPI.Roles.BaseRole{{TPlayer}}.RoleTeam
  - PluginAPI.Roles.BaseRole{{TPlayer}}.SpawnReason
  - PluginAPI.Roles.BaseRole{{TPlayer}}.ActiveTime
  - PluginAPI.Roles.BaseRole{{TPlayer}}.OnUpdate
  - PluginAPI.Roles.BaseRole{{TPlayer}}.OnFixedUpdate
  - PluginAPI.Roles.BaseRole{{TPlayer}}.OnLateUpdate
  - PluginAPI.Roles.BaseRole{{TPlayer}}.OnDestroy
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  nameWithType.vb: Scp049(Of TPlayer)
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
  fullName.vb: PluginAPI.Roles.Scp049(Of TPlayer)
  name.vb: Scp049(Of TPlayer)
- uid: PluginAPI.Roles.Scp049`1.RoleBase
  commentId: F:PluginAPI.Roles.Scp049`1.RoleBase
  id: RoleBase
  parent: PluginAPI.Roles.Scp049`1
  langs:
  - csharp
  - vb
  name: RoleBase
  nameWithType: Scp049<TPlayer>.RoleBase
  fullName: PluginAPI.Roles.Scp049<TPlayer>.RoleBase
  type: Field
  source:
    remote:
      path: NwPluginAPI/Roles/Scps/Scp049.cs
      branch: 13.0.0
      repo: https://github.com/northwood-studios/NwPluginAPI.git
    id: RoleBase
    path: ../NwPluginAPI/Roles/Scps/Scp049.cs
    startLine: 8
  assemblies:
  - PluginAPI
  namespace: PluginAPI.Roles
  syntax:
    content: public readonly Scp049Role RoleBase
    return:
      type: PlayerRoles.PlayableScps.Scp049.Scp049Role
    content.vb: Public ReadOnly RoleBase As Scp049Role
  nameWithType.vb: Scp049(Of TPlayer).RoleBase
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: PluginAPI.Roles.Scp049(Of TPlayer).RoleBase
- uid: PluginAPI.Roles.Scp049`1.SenseAbility
  commentId: F:PluginAPI.Roles.Scp049`1.SenseAbility
  id: SenseAbility
  parent: PluginAPI.Roles.Scp049`1
  langs:
  - csharp
  - vb
  name: SenseAbility
  nameWithType: Scp049<TPlayer>.SenseAbility
  fullName: PluginAPI.Roles.Scp049<TPlayer>.SenseAbility
  type: Field
  source:
    remote:
      path: NwPluginAPI/Roles/Scps/Scp049.cs
      branch: 13.0.0
      repo: https://github.com/northwood-studios/NwPluginAPI.git
    id: SenseAbility
    path: ../NwPluginAPI/Roles/Scps/Scp049.cs
    startLine: 10
  assemblies:
  - PluginAPI
  namespace: PluginAPI.Roles
  syntax:
    content: public readonly Scp049SenseAbility SenseAbility
    return:
      type: PlayerRoles.PlayableScps.Scp049.Scp049SenseAbility
    content.vb: Public ReadOnly SenseAbility As Scp049SenseAbility
  nameWithType.vb: Scp049(Of TPlayer).SenseAbility
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: PluginAPI.Roles.Scp049(Of TPlayer).SenseAbility
- uid: PluginAPI.Roles.Scp049`1.Target
  commentId: P:PluginAPI.Roles.Scp049`1.Target
  id: Target
  parent: PluginAPI.Roles.Scp049`1
  langs:
  - csharp
  - vb
  name: Target
  nameWithType: Scp049<TPlayer>.Target
  fullName: PluginAPI.Roles.Scp049<TPlayer>.Target
  type: Property
  source:
    remote:
      path: NwPluginAPI/Roles/Scps/Scp049.cs
      branch: 13.0.0
      repo: https://github.com/northwood-studios/NwPluginAPI.git
    id: Target
    path: ../NwPluginAPI/Roles/Scps/Scp049.cs
    startLine: 14
  assemblies:
  - PluginAPI
  namespace: PluginAPI.Roles
  syntax:
    content: public TPlayer Target { get; }
    parameters: []
    return:
      type: '{TPlayer}'
    content.vb: Public ReadOnly Property Target As TPlayer
  overload: PluginAPI.Roles.Scp049`1.Target*
  nameWithType.vb: Scp049(Of TPlayer).Target
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: PluginAPI.Roles.Scp049(Of TPlayer).Target
- uid: PluginAPI.Roles.Scp049`1.#ctor(PlayerRoles.PlayableScps.Scp049.Scp049Role)
  commentId: M:PluginAPI.Roles.Scp049`1.#ctor(PlayerRoles.PlayableScps.Scp049.Scp049Role)
  id: '#ctor(PlayerRoles.PlayableScps.Scp049.Scp049Role)'
  parent: PluginAPI.Roles.Scp049`1
  langs:
  - csharp
  - vb
  name: Scp049(Scp049Role)
  nameWithType: Scp049<TPlayer>.Scp049(Scp049Role)
  fullName: PluginAPI.Roles.Scp049<TPlayer>.Scp049(PlayerRoles.PlayableScps.Scp049.Scp049Role)
  type: Constructor
  source:
    remote:
      path: NwPluginAPI/Roles/Scps/Scp049.cs
      branch: 13.0.0
      repo: https://github.com/northwood-studios/NwPluginAPI.git
    id: .ctor
    path: ../NwPluginAPI/Roles/Scps/Scp049.cs
    startLine: 25
  assemblies:
  - PluginAPI
  namespace: PluginAPI.Roles
  syntax:
    content: public Scp049(Scp049Role role)
    parameters:
    - id: role
      type: PlayerRoles.PlayableScps.Scp049.Scp049Role
    content.vb: Public Sub New(role As Scp049Role)
  overload: PluginAPI.Roles.Scp049`1.#ctor*
  nameWithType.vb: Scp049(Of TPlayer).Scp049(Scp049Role)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: PluginAPI.Roles.Scp049(Of TPlayer).Scp049(PlayerRoles.PlayableScps.Scp049.Scp049Role)
- uid: PluginAPI.Roles.Scp049`1.ReceiveSound(PlayerRoles.PlayableScps.Scp049.Scp049AudioPlayer.SoundType@)
  commentId: M:PluginAPI.Roles.Scp049`1.ReceiveSound(PlayerRoles.PlayableScps.Scp049.Scp049AudioPlayer.SoundType@)
  id: ReceiveSound(PlayerRoles.PlayableScps.Scp049.Scp049AudioPlayer.SoundType@)
  parent: PluginAPI.Roles.Scp049`1
  langs:
  - csharp
  - vb
  name: ReceiveSound(ref Scp049AudioPlayer.SoundType)
  nameWithType: Scp049<TPlayer>.ReceiveSound(ref Scp049AudioPlayer.SoundType)
  fullName: PluginAPI.Roles.Scp049<TPlayer>.ReceiveSound(ref PlayerRoles.PlayableScps.Scp049.Scp049AudioPlayer.SoundType)
  type: Method
  source:
    remote:
      path: NwPluginAPI/Roles/Scps/Scp049.cs
      branch: 13.0.0
      repo: https://github.com/northwood-studios/NwPluginAPI.git
    id: ReceiveSound
    path: ../NwPluginAPI/Roles/Scps/Scp049.cs
    startLine: 31
  assemblies:
  - PluginAPI
  namespace: PluginAPI.Roles
  syntax:
    content: public virtual bool ReceiveSound(ref Scp049AudioPlayer.SoundType type)
    parameters:
    - id: type
      type: PlayerRoles.PlayableScps.Scp049.Scp049AudioPlayer.SoundType
    return:
      type: System.Boolean
    content.vb: Public Overridable Function ReceiveSound(ByRef type As Scp049AudioPlayer.SoundType) As Boolean
  overload: PluginAPI.Roles.Scp049`1.ReceiveSound*
  nameWithType.vb: Scp049(Of TPlayer).ReceiveSound(ByRef Scp049AudioPlayer.SoundType)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: PluginAPI.Roles.Scp049(Of TPlayer).ReceiveSound(ByRef PlayerRoles.PlayableScps.Scp049.Scp049AudioPlayer.SoundType)
  name.vb: ReceiveSound(ByRef Scp049AudioPlayer.SoundType)
- uid: PluginAPI.Roles.Scp049`1.CallZombies(System.Single@)
  commentId: M:PluginAPI.Roles.Scp049`1.CallZombies(System.Single@)
  id: CallZombies(System.Single@)
  parent: PluginAPI.Roles.Scp049`1
  langs:
  - csharp
  - vb
  name: CallZombies(ref Single)
  nameWithType: Scp049<TPlayer>.CallZombies(ref Single)
  fullName: PluginAPI.Roles.Scp049<TPlayer>.CallZombies(ref System.Single)
  type: Method
  source:
    remote:
      path: NwPluginAPI/Roles/Scps/Scp049.cs
      branch: 13.0.0
      repo: https://github.com/northwood-studios/NwPluginAPI.git
    id: CallZombies
    path: ../NwPluginAPI/Roles/Scps/Scp049.cs
    startLine: 33
  assemblies:
  - PluginAPI
  namespace: PluginAPI.Roles
  syntax:
    content: public virtual bool CallZombies(ref float duration)
    parameters:
    - id: duration
      type: System.Single
    return:
      type: System.Boolean
    content.vb: Public Overridable Function CallZombies(ByRef duration As Single) As Boolean
  overload: PluginAPI.Roles.Scp049`1.CallZombies*
  nameWithType.vb: Scp049(Of TPlayer).CallZombies(ByRef Single)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: PluginAPI.Roles.Scp049(Of TPlayer).CallZombies(ByRef System.Single)
  name.vb: CallZombies(ByRef Single)
- uid: PluginAPI.Roles.Scp049`1.AttackPlayer(`0)
  commentId: M:PluginAPI.Roles.Scp049`1.AttackPlayer(`0)
  id: AttackPlayer(`0)
  parent: PluginAPI.Roles.Scp049`1
  langs:
  - csharp
  - vb
  name: AttackPlayer(TPlayer)
  nameWithType: Scp049<TPlayer>.AttackPlayer(TPlayer)
  fullName: PluginAPI.Roles.Scp049<TPlayer>.AttackPlayer(TPlayer)
  type: Method
  source:
    remote:
      path: NwPluginAPI/Roles/Scps/Scp049.cs
      branch: 13.0.0
      repo: https://github.com/northwood-studios/NwPluginAPI.git
    id: AttackPlayer
    path: ../NwPluginAPI/Roles/Scps/Scp049.cs
    startLine: 35
  assemblies:
  - PluginAPI
  namespace: PluginAPI.Roles
  syntax:
    content: public virtual bool AttackPlayer(TPlayer target)
    parameters:
    - id: target
      type: '{TPlayer}'
    return:
      type: System.Boolean
    content.vb: Public Overridable Function AttackPlayer(target As TPlayer) As Boolean
  overload: PluginAPI.Roles.Scp049`1.AttackPlayer*
  nameWithType.vb: Scp049(Of TPlayer).AttackPlayer(TPlayer)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: PluginAPI.Roles.Scp049(Of TPlayer).AttackPlayer(TPlayer)
- uid: PluginAPI.Roles.Scp049`1.ChasePlayer(`0)
  commentId: M:PluginAPI.Roles.Scp049`1.ChasePlayer(`0)
  id: ChasePlayer(`0)
  parent: PluginAPI.Roles.Scp049`1
  langs:
  - csharp
  - vb
  name: ChasePlayer(TPlayer)
  nameWithType: Scp049<TPlayer>.ChasePlayer(TPlayer)
  fullName: PluginAPI.Roles.Scp049<TPlayer>.ChasePlayer(TPlayer)
  type: Method
  source:
    remote:
      path: NwPluginAPI/Roles/Scps/Scp049.cs
      branch: 13.0.0
      repo: https://github.com/northwood-studios/NwPluginAPI.git
    id: ChasePlayer
    path: ../NwPluginAPI/Roles/Scps/Scp049.cs
    startLine: 37
  assemblies:
  - PluginAPI
  namespace: PluginAPI.Roles
  syntax:
    content: public virtual bool ChasePlayer(TPlayer target)
    parameters:
    - id: target
      type: '{TPlayer}'
    return:
      type: System.Boolean
    content.vb: Public Overridable Function ChasePlayer(target As TPlayer) As Boolean
  overload: PluginAPI.Roles.Scp049`1.ChasePlayer*
  nameWithType.vb: Scp049(Of TPlayer).ChasePlayer(TPlayer)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: PluginAPI.Roles.Scp049(Of TPlayer).ChasePlayer(TPlayer)
- uid: PluginAPI.Roles.Scp049`1.InfectPlayer(`0)
  commentId: M:PluginAPI.Roles.Scp049`1.InfectPlayer(`0)
  id: InfectPlayer(`0)
  parent: PluginAPI.Roles.Scp049`1
  langs:
  - csharp
  - vb
  name: InfectPlayer(TPlayer)
  nameWithType: Scp049<TPlayer>.InfectPlayer(TPlayer)
  fullName: PluginAPI.Roles.Scp049<TPlayer>.InfectPlayer(TPlayer)
  type: Method
  source:
    remote:
      path: NwPluginAPI/Roles/Scps/Scp049.cs
      branch: 13.0.0
      repo: https://github.com/northwood-studios/NwPluginAPI.git
    id: InfectPlayer
    path: ../NwPluginAPI/Roles/Scps/Scp049.cs
    startLine: 39
  assemblies:
  - PluginAPI
  namespace: PluginAPI.Roles
  syntax:
    content: public virtual bool InfectPlayer(TPlayer target)
    parameters:
    - id: target
      type: '{TPlayer}'
    return:
      type: System.Boolean
    content.vb: Public Overridable Function InfectPlayer(target As TPlayer) As Boolean
  overload: PluginAPI.Roles.Scp049`1.InfectPlayer*
  nameWithType.vb: Scp049(Of TPlayer).InfectPlayer(TPlayer)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: PluginAPI.Roles.Scp049(Of TPlayer).InfectPlayer(TPlayer)
references:
- uid: PluginAPI.Roles
  commentId: N:PluginAPI.Roles
  name: PluginAPI.Roles
  nameWithType: PluginAPI.Roles
  fullName: PluginAPI.Roles
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: PluginAPI.Roles.BaseRole{{TPlayer}}
  commentId: T:PluginAPI.Roles.BaseRole{`0}
  parent: PluginAPI.Roles
  definition: PluginAPI.Roles.BaseRole`1
  name: BaseRole<TPlayer>
  nameWithType: BaseRole<TPlayer>
  fullName: PluginAPI.Roles.BaseRole<TPlayer>
  nameWithType.vb: BaseRole(Of TPlayer)
  fullName.vb: PluginAPI.Roles.BaseRole(Of TPlayer)
  name.vb: BaseRole(Of TPlayer)
  spec.csharp:
  - uid: PluginAPI.Roles.BaseRole`1
    name: BaseRole
    nameWithType: BaseRole
    fullName: PluginAPI.Roles.BaseRole
  - name: <
    nameWithType: <
    fullName: <
  - name: TPlayer
    nameWithType: TPlayer
    fullName: TPlayer
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: PluginAPI.Roles.BaseRole`1
    name: BaseRole
    nameWithType: BaseRole
    fullName: PluginAPI.Roles.BaseRole
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TPlayer
    nameWithType: TPlayer
    fullName: TPlayer
  - name: )
    nameWithType: )
    fullName: )
- uid: PluginAPI.Roles.BaseScp{{TPlayer}}
  commentId: T:PluginAPI.Roles.BaseScp{`0}
  parent: PluginAPI.Roles
  definition: PluginAPI.Roles.BaseScp`1
  name: BaseScp<TPlayer>
  nameWithType: BaseScp<TPlayer>
  fullName: PluginAPI.Roles.BaseScp<TPlayer>
  nameWithType.vb: BaseScp(Of TPlayer)
  fullName.vb: PluginAPI.Roles.BaseScp(Of TPlayer)
  name.vb: BaseScp(Of TPlayer)
  spec.csharp:
  - uid: PluginAPI.Roles.BaseScp`1
    name: BaseScp
    nameWithType: BaseScp
    fullName: PluginAPI.Roles.BaseScp
  - name: <
    nameWithType: <
    fullName: <
  - name: TPlayer
    nameWithType: TPlayer
    fullName: TPlayer
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: PluginAPI.Roles.BaseScp`1
    name: BaseScp
    nameWithType: BaseScp
    fullName: PluginAPI.Roles.BaseScp
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TPlayer
    nameWithType: TPlayer
    fullName: TPlayer
  - name: )
    nameWithType: )
    fullName: )
- uid: PluginAPI.Roles.BaseRole{{TPlayer}}.Player
  commentId: F:PluginAPI.Roles.BaseRole{`0}.Player
  parent: PluginAPI.Roles.BaseRole{{TPlayer}}
  definition: PluginAPI.Roles.BaseRole`1.Player
  name: Player
  nameWithType: BaseRole<TPlayer>.Player
  fullName: PluginAPI.Roles.BaseRole<TPlayer>.Player
  nameWithType.vb: BaseRole(Of TPlayer).Player
  fullName.vb: PluginAPI.Roles.BaseRole(Of TPlayer).Player
- uid: PluginAPI.Roles.BaseRole{{TPlayer}}.RoleId
  commentId: P:PluginAPI.Roles.BaseRole{`0}.RoleId
  parent: PluginAPI.Roles.BaseRole{{TPlayer}}
  definition: PluginAPI.Roles.BaseRole`1.RoleId
  name: RoleId
  nameWithType: BaseRole<TPlayer>.RoleId
  fullName: PluginAPI.Roles.BaseRole<TPlayer>.RoleId
  nameWithType.vb: BaseRole(Of TPlayer).RoleId
  fullName.vb: PluginAPI.Roles.BaseRole(Of TPlayer).RoleId
- uid: PluginAPI.Roles.BaseRole{{TPlayer}}.RoleName
  commentId: P:PluginAPI.Roles.BaseRole{`0}.RoleName
  parent: PluginAPI.Roles.BaseRole{{TPlayer}}
  definition: PluginAPI.Roles.BaseRole`1.RoleName
  name: RoleName
  nameWithType: BaseRole<TPlayer>.RoleName
  fullName: PluginAPI.Roles.BaseRole<TPlayer>.RoleName
  nameWithType.vb: BaseRole(Of TPlayer).RoleName
  fullName.vb: PluginAPI.Roles.BaseRole(Of TPlayer).RoleName
- uid: PluginAPI.Roles.BaseRole{{TPlayer}}.RoleColor
  commentId: P:PluginAPI.Roles.BaseRole{`0}.RoleColor
  parent: PluginAPI.Roles.BaseRole{{TPlayer}}
  definition: PluginAPI.Roles.BaseRole`1.RoleColor
  name: RoleColor
  nameWithType: BaseRole<TPlayer>.RoleColor
  fullName: PluginAPI.Roles.BaseRole<TPlayer>.RoleColor
  nameWithType.vb: BaseRole(Of TPlayer).RoleColor
  fullName.vb: PluginAPI.Roles.BaseRole(Of TPlayer).RoleColor
- uid: PluginAPI.Roles.BaseRole{{TPlayer}}.RoleTeam
  commentId: P:PluginAPI.Roles.BaseRole{`0}.RoleTeam
  parent: PluginAPI.Roles.BaseRole{{TPlayer}}
  definition: PluginAPI.Roles.BaseRole`1.RoleTeam
  name: RoleTeam
  nameWithType: BaseRole<TPlayer>.RoleTeam
  fullName: PluginAPI.Roles.BaseRole<TPlayer>.RoleTeam
  nameWithType.vb: BaseRole(Of TPlayer).RoleTeam
  fullName.vb: PluginAPI.Roles.BaseRole(Of TPlayer).RoleTeam
- uid: PluginAPI.Roles.BaseRole{{TPlayer}}.SpawnReason
  commentId: P:PluginAPI.Roles.BaseRole{`0}.SpawnReason
  parent: PluginAPI.Roles.BaseRole{{TPlayer}}
  definition: PluginAPI.Roles.BaseRole`1.SpawnReason
  name: SpawnReason
  nameWithType: BaseRole<TPlayer>.SpawnReason
  fullName: PluginAPI.Roles.BaseRole<TPlayer>.SpawnReason
  nameWithType.vb: BaseRole(Of TPlayer).SpawnReason
  fullName.vb: PluginAPI.Roles.BaseRole(Of TPlayer).SpawnReason
- uid: PluginAPI.Roles.BaseRole{{TPlayer}}.ActiveTime
  commentId: P:PluginAPI.Roles.BaseRole{`0}.ActiveTime
  parent: PluginAPI.Roles.BaseRole{{TPlayer}}
  definition: PluginAPI.Roles.BaseRole`1.ActiveTime
  name: ActiveTime
  nameWithType: BaseRole<TPlayer>.ActiveTime
  fullName: PluginAPI.Roles.BaseRole<TPlayer>.ActiveTime
  nameWithType.vb: BaseRole(Of TPlayer).ActiveTime
  fullName.vb: PluginAPI.Roles.BaseRole(Of TPlayer).ActiveTime
- uid: PluginAPI.Roles.BaseRole{{TPlayer}}.OnUpdate
  commentId: M:PluginAPI.Roles.BaseRole{`0}.OnUpdate
  parent: PluginAPI.Roles.BaseRole{{TPlayer}}
  definition: PluginAPI.Roles.BaseRole`1.OnUpdate
  name: OnUpdate()
  nameWithType: BaseRole<TPlayer>.OnUpdate()
  fullName: PluginAPI.Roles.BaseRole<TPlayer>.OnUpdate()
  nameWithType.vb: BaseRole(Of TPlayer).OnUpdate()
  fullName.vb: PluginAPI.Roles.BaseRole(Of TPlayer).OnUpdate()
  spec.csharp:
  - uid: PluginAPI.Roles.BaseRole`1.OnUpdate
    name: OnUpdate
    nameWithType: BaseRole<TPlayer>.OnUpdate
    fullName: PluginAPI.Roles.BaseRole<TPlayer>.OnUpdate
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: PluginAPI.Roles.BaseRole`1.OnUpdate
    name: OnUpdate
    nameWithType: BaseRole(Of TPlayer).OnUpdate
    fullName: PluginAPI.Roles.BaseRole(Of TPlayer).OnUpdate
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: PluginAPI.Roles.BaseRole{{TPlayer}}.OnFixedUpdate
  commentId: M:PluginAPI.Roles.BaseRole{`0}.OnFixedUpdate
  parent: PluginAPI.Roles.BaseRole{{TPlayer}}
  definition: PluginAPI.Roles.BaseRole`1.OnFixedUpdate
  name: OnFixedUpdate()
  nameWithType: BaseRole<TPlayer>.OnFixedUpdate()
  fullName: PluginAPI.Roles.BaseRole<TPlayer>.OnFixedUpdate()
  nameWithType.vb: BaseRole(Of TPlayer).OnFixedUpdate()
  fullName.vb: PluginAPI.Roles.BaseRole(Of TPlayer).OnFixedUpdate()
  spec.csharp:
  - uid: PluginAPI.Roles.BaseRole`1.OnFixedUpdate
    name: OnFixedUpdate
    nameWithType: BaseRole<TPlayer>.OnFixedUpdate
    fullName: PluginAPI.Roles.BaseRole<TPlayer>.OnFixedUpdate
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: PluginAPI.Roles.BaseRole`1.OnFixedUpdate
    name: OnFixedUpdate
    nameWithType: BaseRole(Of TPlayer).OnFixedUpdate
    fullName: PluginAPI.Roles.BaseRole(Of TPlayer).OnFixedUpdate
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: PluginAPI.Roles.BaseRole{{TPlayer}}.OnLateUpdate
  commentId: M:PluginAPI.Roles.BaseRole{`0}.OnLateUpdate
  parent: PluginAPI.Roles.BaseRole{{TPlayer}}
  definition: PluginAPI.Roles.BaseRole`1.OnLateUpdate
  name: OnLateUpdate()
  nameWithType: BaseRole<TPlayer>.OnLateUpdate()
  fullName: PluginAPI.Roles.BaseRole<TPlayer>.OnLateUpdate()
  nameWithType.vb: BaseRole(Of TPlayer).OnLateUpdate()
  fullName.vb: PluginAPI.Roles.BaseRole(Of TPlayer).OnLateUpdate()
  spec.csharp:
  - uid: PluginAPI.Roles.BaseRole`1.OnLateUpdate
    name: OnLateUpdate
    nameWithType: BaseRole<TPlayer>.OnLateUpdate
    fullName: PluginAPI.Roles.BaseRole<TPlayer>.OnLateUpdate
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: PluginAPI.Roles.BaseRole`1.OnLateUpdate
    name: OnLateUpdate
    nameWithType: BaseRole(Of TPlayer).OnLateUpdate
    fullName: PluginAPI.Roles.BaseRole(Of TPlayer).OnLateUpdate
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: PluginAPI.Roles.BaseRole{{TPlayer}}.OnDestroy
  commentId: M:PluginAPI.Roles.BaseRole{`0}.OnDestroy
  parent: PluginAPI.Roles.BaseRole{{TPlayer}}
  definition: PluginAPI.Roles.BaseRole`1.OnDestroy
  name: OnDestroy()
  nameWithType: BaseRole<TPlayer>.OnDestroy()
  fullName: PluginAPI.Roles.BaseRole<TPlayer>.OnDestroy()
  nameWithType.vb: BaseRole(Of TPlayer).OnDestroy()
  fullName.vb: PluginAPI.Roles.BaseRole(Of TPlayer).OnDestroy()
  spec.csharp:
  - uid: PluginAPI.Roles.BaseRole`1.OnDestroy
    name: OnDestroy
    nameWithType: BaseRole<TPlayer>.OnDestroy
    fullName: PluginAPI.Roles.BaseRole<TPlayer>.OnDestroy
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: PluginAPI.Roles.BaseRole`1.OnDestroy
    name: OnDestroy
    nameWithType: BaseRole(Of TPlayer).OnDestroy
    fullName: PluginAPI.Roles.BaseRole(Of TPlayer).OnDestroy
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: PluginAPI.Roles.BaseRole`1
  commentId: T:PluginAPI.Roles.BaseRole`1
  name: BaseRole<TPlayer>
  nameWithType: BaseRole<TPlayer>
  fullName: PluginAPI.Roles.BaseRole<TPlayer>
  nameWithType.vb: BaseRole(Of TPlayer)
  fullName.vb: PluginAPI.Roles.BaseRole(Of TPlayer)
  name.vb: BaseRole(Of TPlayer)
  spec.csharp:
  - uid: PluginAPI.Roles.BaseRole`1
    name: BaseRole
    nameWithType: BaseRole
    fullName: PluginAPI.Roles.BaseRole
  - name: <
    nameWithType: <
    fullName: <
  - name: TPlayer
    nameWithType: TPlayer
    fullName: TPlayer
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: PluginAPI.Roles.BaseRole`1
    name: BaseRole
    nameWithType: BaseRole
    fullName: PluginAPI.Roles.BaseRole
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TPlayer
    nameWithType: TPlayer
    fullName: TPlayer
  - name: )
    nameWithType: )
    fullName: )
- uid: PluginAPI.Roles.BaseScp`1
  commentId: T:PluginAPI.Roles.BaseScp`1
  name: BaseScp<TPlayer>
  nameWithType: BaseScp<TPlayer>
  fullName: PluginAPI.Roles.BaseScp<TPlayer>
  nameWithType.vb: BaseScp(Of TPlayer)
  fullName.vb: PluginAPI.Roles.BaseScp(Of TPlayer)
  name.vb: BaseScp(Of TPlayer)
  spec.csharp:
  - uid: PluginAPI.Roles.BaseScp`1
    name: BaseScp
    nameWithType: BaseScp
    fullName: PluginAPI.Roles.BaseScp
  - name: <
    nameWithType: <
    fullName: <
  - name: TPlayer
    nameWithType: TPlayer
    fullName: TPlayer
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: PluginAPI.Roles.BaseScp`1
    name: BaseScp
    nameWithType: BaseScp
    fullName: PluginAPI.Roles.BaseScp
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TPlayer
    nameWithType: TPlayer
    fullName: TPlayer
  - name: )
    nameWithType: )
    fullName: )
- uid: PluginAPI.Roles.BaseRole`1.Player
  commentId: F:PluginAPI.Roles.BaseRole`1.Player
  name: Player
  nameWithType: BaseRole<TPlayer>.Player
  fullName: PluginAPI.Roles.BaseRole<TPlayer>.Player
  nameWithType.vb: BaseRole(Of TPlayer).Player
  fullName.vb: PluginAPI.Roles.BaseRole(Of TPlayer).Player
- uid: PluginAPI.Roles.BaseRole`1.RoleId
  commentId: P:PluginAPI.Roles.BaseRole`1.RoleId
  name: RoleId
  nameWithType: BaseRole<TPlayer>.RoleId
  fullName: PluginAPI.Roles.BaseRole<TPlayer>.RoleId
  nameWithType.vb: BaseRole(Of TPlayer).RoleId
  fullName.vb: PluginAPI.Roles.BaseRole(Of TPlayer).RoleId
- uid: PluginAPI.Roles.BaseRole`1.RoleName
  commentId: P:PluginAPI.Roles.BaseRole`1.RoleName
  name: RoleName
  nameWithType: BaseRole<TPlayer>.RoleName
  fullName: PluginAPI.Roles.BaseRole<TPlayer>.RoleName
  nameWithType.vb: BaseRole(Of TPlayer).RoleName
  fullName.vb: PluginAPI.Roles.BaseRole(Of TPlayer).RoleName
- uid: PluginAPI.Roles.BaseRole`1.RoleColor
  commentId: P:PluginAPI.Roles.BaseRole`1.RoleColor
  name: RoleColor
  nameWithType: BaseRole<TPlayer>.RoleColor
  fullName: PluginAPI.Roles.BaseRole<TPlayer>.RoleColor
  nameWithType.vb: BaseRole(Of TPlayer).RoleColor
  fullName.vb: PluginAPI.Roles.BaseRole(Of TPlayer).RoleColor
- uid: PluginAPI.Roles.BaseRole`1.RoleTeam
  commentId: P:PluginAPI.Roles.BaseRole`1.RoleTeam
  name: RoleTeam
  nameWithType: BaseRole<TPlayer>.RoleTeam
  fullName: PluginAPI.Roles.BaseRole<TPlayer>.RoleTeam
  nameWithType.vb: BaseRole(Of TPlayer).RoleTeam
  fullName.vb: PluginAPI.Roles.BaseRole(Of TPlayer).RoleTeam
- uid: PluginAPI.Roles.BaseRole`1.SpawnReason
  commentId: P:PluginAPI.Roles.BaseRole`1.SpawnReason
  name: SpawnReason
  nameWithType: BaseRole<TPlayer>.SpawnReason
  fullName: PluginAPI.Roles.BaseRole<TPlayer>.SpawnReason
  nameWithType.vb: BaseRole(Of TPlayer).SpawnReason
  fullName.vb: PluginAPI.Roles.BaseRole(Of TPlayer).SpawnReason
- uid: PluginAPI.Roles.BaseRole`1.ActiveTime
  commentId: P:PluginAPI.Roles.BaseRole`1.ActiveTime
  name: ActiveTime
  nameWithType: BaseRole<TPlayer>.ActiveTime
  fullName: PluginAPI.Roles.BaseRole<TPlayer>.ActiveTime
  nameWithType.vb: BaseRole(Of TPlayer).ActiveTime
  fullName.vb: PluginAPI.Roles.BaseRole(Of TPlayer).ActiveTime
- uid: PluginAPI.Roles.BaseRole`1.OnUpdate
  commentId: M:PluginAPI.Roles.BaseRole`1.OnUpdate
  name: OnUpdate()
  nameWithType: BaseRole<TPlayer>.OnUpdate()
  fullName: PluginAPI.Roles.BaseRole<TPlayer>.OnUpdate()
  nameWithType.vb: BaseRole(Of TPlayer).OnUpdate()
  fullName.vb: PluginAPI.Roles.BaseRole(Of TPlayer).OnUpdate()
  spec.csharp:
  - uid: PluginAPI.Roles.BaseRole`1.OnUpdate
    name: OnUpdate
    nameWithType: BaseRole<TPlayer>.OnUpdate
    fullName: PluginAPI.Roles.BaseRole<TPlayer>.OnUpdate
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: PluginAPI.Roles.BaseRole`1.OnUpdate
    name: OnUpdate
    nameWithType: BaseRole(Of TPlayer).OnUpdate
    fullName: PluginAPI.Roles.BaseRole(Of TPlayer).OnUpdate
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: PluginAPI.Roles.BaseRole`1.OnFixedUpdate
  commentId: M:PluginAPI.Roles.BaseRole`1.OnFixedUpdate
  name: OnFixedUpdate()
  nameWithType: BaseRole<TPlayer>.OnFixedUpdate()
  fullName: PluginAPI.Roles.BaseRole<TPlayer>.OnFixedUpdate()
  nameWithType.vb: BaseRole(Of TPlayer).OnFixedUpdate()
  fullName.vb: PluginAPI.Roles.BaseRole(Of TPlayer).OnFixedUpdate()
  spec.csharp:
  - uid: PluginAPI.Roles.BaseRole`1.OnFixedUpdate
    name: OnFixedUpdate
    nameWithType: BaseRole<TPlayer>.OnFixedUpdate
    fullName: PluginAPI.Roles.BaseRole<TPlayer>.OnFixedUpdate
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: PluginAPI.Roles.BaseRole`1.OnFixedUpdate
    name: OnFixedUpdate
    nameWithType: BaseRole(Of TPlayer).OnFixedUpdate
    fullName: PluginAPI.Roles.BaseRole(Of TPlayer).OnFixedUpdate
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: PluginAPI.Roles.BaseRole`1.OnLateUpdate
  commentId: M:PluginAPI.Roles.BaseRole`1.OnLateUpdate
  name: OnLateUpdate()
  nameWithType: BaseRole<TPlayer>.OnLateUpdate()
  fullName: PluginAPI.Roles.BaseRole<TPlayer>.OnLateUpdate()
  nameWithType.vb: BaseRole(Of TPlayer).OnLateUpdate()
  fullName.vb: PluginAPI.Roles.BaseRole(Of TPlayer).OnLateUpdate()
  spec.csharp:
  - uid: PluginAPI.Roles.BaseRole`1.OnLateUpdate
    name: OnLateUpdate
    nameWithType: BaseRole<TPlayer>.OnLateUpdate
    fullName: PluginAPI.Roles.BaseRole<TPlayer>.OnLateUpdate
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: PluginAPI.Roles.BaseRole`1.OnLateUpdate
    name: OnLateUpdate
    nameWithType: BaseRole(Of TPlayer).OnLateUpdate
    fullName: PluginAPI.Roles.BaseRole(Of TPlayer).OnLateUpdate
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: PluginAPI.Roles.BaseRole`1.OnDestroy
  commentId: M:PluginAPI.Roles.BaseRole`1.OnDestroy
  name: OnDestroy()
  nameWithType: BaseRole<TPlayer>.OnDestroy()
  fullName: PluginAPI.Roles.BaseRole<TPlayer>.OnDestroy()
  nameWithType.vb: BaseRole(Of TPlayer).OnDestroy()
  fullName.vb: PluginAPI.Roles.BaseRole(Of TPlayer).OnDestroy()
  spec.csharp:
  - uid: PluginAPI.Roles.BaseRole`1.OnDestroy
    name: OnDestroy
    nameWithType: BaseRole<TPlayer>.OnDestroy
    fullName: PluginAPI.Roles.BaseRole<TPlayer>.OnDestroy
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: PluginAPI.Roles.BaseRole`1.OnDestroy
    name: OnDestroy
    nameWithType: BaseRole(Of TPlayer).OnDestroy
    fullName: PluginAPI.Roles.BaseRole(Of TPlayer).OnDestroy
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: PlayerRoles.PlayableScps.Scp049.Scp049Role
  commentId: T:PlayerRoles.PlayableScps.Scp049.Scp049Role
  parent: PlayerRoles.PlayableScps.Scp049
  isExternal: true
  name: Scp049Role
  nameWithType: Scp049Role
  fullName: PlayerRoles.PlayableScps.Scp049.Scp049Role
- uid: PlayerRoles.PlayableScps.Scp049
  commentId: N:PlayerRoles.PlayableScps.Scp049
  isExternal: true
  name: PlayerRoles.PlayableScps.Scp049
  nameWithType: PlayerRoles.PlayableScps.Scp049
  fullName: PlayerRoles.PlayableScps.Scp049
- uid: PlayerRoles.PlayableScps.Scp049.Scp049SenseAbility
  commentId: T:PlayerRoles.PlayableScps.Scp049.Scp049SenseAbility
  parent: PlayerRoles.PlayableScps.Scp049
  isExternal: true
  name: Scp049SenseAbility
  nameWithType: Scp049SenseAbility
  fullName: PlayerRoles.PlayableScps.Scp049.Scp049SenseAbility
- uid: PluginAPI.Roles.Scp049`1.Target*
  commentId: Overload:PluginAPI.Roles.Scp049`1.Target
  name: Target
  nameWithType: Scp049<TPlayer>.Target
  fullName: PluginAPI.Roles.Scp049<TPlayer>.Target
  nameWithType.vb: Scp049(Of TPlayer).Target
  fullName.vb: PluginAPI.Roles.Scp049(Of TPlayer).Target
- uid: '{TPlayer}'
  commentId: '!:TPlayer'
  definition: TPlayer
  name: TPlayer
  nameWithType: TPlayer
  fullName: TPlayer
- uid: TPlayer
  name: TPlayer
  nameWithType: TPlayer
  fullName: TPlayer
- uid: PluginAPI.Roles.Scp049`1.#ctor*
  commentId: Overload:PluginAPI.Roles.Scp049`1.#ctor
  name: Scp049
  nameWithType: Scp049<TPlayer>.Scp049
  fullName: PluginAPI.Roles.Scp049<TPlayer>.Scp049
  nameWithType.vb: Scp049(Of TPlayer).Scp049
  fullName.vb: PluginAPI.Roles.Scp049(Of TPlayer).Scp049
- uid: PluginAPI.Roles.Scp049`1.ReceiveSound*
  commentId: Overload:PluginAPI.Roles.Scp049`1.ReceiveSound
  name: ReceiveSound
  nameWithType: Scp049<TPlayer>.ReceiveSound
  fullName: PluginAPI.Roles.Scp049<TPlayer>.ReceiveSound
  nameWithType.vb: Scp049(Of TPlayer).ReceiveSound
  fullName.vb: PluginAPI.Roles.Scp049(Of TPlayer).ReceiveSound
- uid: PlayerRoles.PlayableScps.Scp049.Scp049AudioPlayer.SoundType
  commentId: T:PlayerRoles.PlayableScps.Scp049.Scp049AudioPlayer.SoundType
  parent: PlayerRoles.PlayableScps.Scp049
  isExternal: true
  name: Scp049AudioPlayer.SoundType
  nameWithType: Scp049AudioPlayer.SoundType
  fullName: PlayerRoles.PlayableScps.Scp049.Scp049AudioPlayer.SoundType
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: PluginAPI.Roles.Scp049`1.CallZombies*
  commentId: Overload:PluginAPI.Roles.Scp049`1.CallZombies
  name: CallZombies
  nameWithType: Scp049<TPlayer>.CallZombies
  fullName: PluginAPI.Roles.Scp049<TPlayer>.CallZombies
  nameWithType.vb: Scp049(Of TPlayer).CallZombies
  fullName.vb: PluginAPI.Roles.Scp049(Of TPlayer).CallZombies
- uid: System.Single
  commentId: T:System.Single
  parent: System
  isExternal: true
  name: Single
  nameWithType: Single
  fullName: System.Single
- uid: PluginAPI.Roles.Scp049`1.AttackPlayer*
  commentId: Overload:PluginAPI.Roles.Scp049`1.AttackPlayer
  name: AttackPlayer
  nameWithType: Scp049<TPlayer>.AttackPlayer
  fullName: PluginAPI.Roles.Scp049<TPlayer>.AttackPlayer
  nameWithType.vb: Scp049(Of TPlayer).AttackPlayer
  fullName.vb: PluginAPI.Roles.Scp049(Of TPlayer).AttackPlayer
- uid: PluginAPI.Roles.Scp049`1.ChasePlayer*
  commentId: Overload:PluginAPI.Roles.Scp049`1.ChasePlayer
  name: ChasePlayer
  nameWithType: Scp049<TPlayer>.ChasePlayer
  fullName: PluginAPI.Roles.Scp049<TPlayer>.ChasePlayer
  nameWithType.vb: Scp049(Of TPlayer).ChasePlayer
  fullName.vb: PluginAPI.Roles.Scp049(Of TPlayer).ChasePlayer
- uid: PluginAPI.Roles.Scp049`1.InfectPlayer*
  commentId: Overload:PluginAPI.Roles.Scp049`1.InfectPlayer
  name: InfectPlayer
  nameWithType: Scp049<TPlayer>.InfectPlayer
  fullName: PluginAPI.Roles.Scp049<TPlayer>.InfectPlayer
  nameWithType.vb: Scp049(Of TPlayer).InfectPlayer
  fullName.vb: PluginAPI.Roles.Scp049(Of TPlayer).InfectPlayer
